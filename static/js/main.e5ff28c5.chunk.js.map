{"version":3,"sources":["services/GridService.ts","constants.ts","helpers/scenario.ts","helpers/grid.ts","helpers/misc.ts","helpers/emoji.ts","models/cell.ts","decorators/bind.ts","contextProviders/GridProvider.tsx","components/Cell/Cell.tsx","hoc/withContainerClass.tsx","components/Grid/Grid.tsx","App.tsx","hoc/withGridContext.tsx","serviceWorker.ts","index.tsx","components/Cell/Cell.module.scss","components/Grid/Grid.module.scss"],"names":["EViews","minCellSize","gridStyle","MIN_CELL_SIZE","parseInt","delay","ms","Promise","resolve","setTimeout","getViewportSize","window","viewportHeight","innerHeight","viewportWidth","innerWidth","isPortraitMode","isMobileMode","getDesktopMinColumnsAndRows","minColumns","minRows","getMinGridSize","isPortrait","getMobileMinColumnsAndRows","calculateGridSize","gridItemSize","Math","min","columns","round","rows","makeSpiralScenario","Symbol","asyncIterator","a","column","row","minColumn","minRow","maxColumn","maxRow","vector","x","y","getVectorX","getVectorY","getNext","nextX","nextY","next","makeFromCellScenario","cell","vectors","previousCells","_minColumn","_maxColumn","_minRow","_maxRow","filteredVectors","uniqWith","filter","isEqual","yieldedCells","nextCells","forEach","find","push","filtered","length","runGridScenario","scenario","stepDelay","process","async","getRandomArrayItem","array","max","rand","random","getRandomInteger","searchRandomEmoji","cache","Map","getSearchResults","searchString","fromCache","get","searchResults","emojiIndex","search","map","item","native","set","searchStrings","flat","EmptyModel","isEmpty","EmojiModel","content","isEmoji","HelloEmojiModel","isHello","TextModel","isText","GridService","observable","struct","initialAnimationWasShown","isAnimationRun","initWasRequested","this","init","showInitialAnimation","withAnimationDecorator","addEventListener","debounce","viewportSize","reaction","isMobile","getMenuPosition","result","cells","clear","cellId","model","grid","initGrid","method","startAnimation","args","apply","stopAnimation","CLEAR_OFFSET","STEP_DELAY","midColumn","floor","midRow","middleCellId","middleCell","getCell","helloSymbol","data","id","beforeLastAnimationTimestamp","performance","now","helloAnimationTime","cellStyles","scenarioConfig","endDelay","initial","computed","action","target","propertyKey","descriptor","configurable","value","bind","Object","defineProperty","writable","makeGrid","gridContext","React","createContext","GridProvider","children","store","useLocalStore","Provider","useGrid","useContext","Error","CellWrap","className","styles","CellComponentFactory","observer","component","Emoji","classNames","cellEmoji","HelloEmoji","cellHelloEmoji","Text","cellText","withContainerClass","Component","selector","props","element","classList","add","remove","document","querySelector","Grid","key","Cell","Row","Col","col","gridWrapper","GridWithContext","withGridContext","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e5ff28c5.chunk.js","sourcesContent":["import { action, computed, observable, reaction } from 'mobx'\nimport {\n  calculateGridSize,\n  getMenuPosition,\n  getViewportSize,\n  isMobileMode,\n  isPortraitMode,\n  makeFromCellScenario,\n  makeSpiralScenario,\n  runGridScenario\n} from '../helpers/grid'\nimport { debounce } from 'lodash'\nimport { searchRandomEmoji } from '../helpers/emoji'\nimport { delay } from '../helpers/scenario'\nimport bind from '../decorators/bind'\nimport cellStyles from '../components/Cell/Cell.module.scss'\nimport { EmojiModel, EmptyModel, HelloEmojiModel, TCellModel } from '../models/cell'\n\nexport enum EViews { initial, application, snake }\n\nexport interface ICell {\n  model: TCellModel\n}\n\nexport class GridService {\n  @observable\n  columns: number = 0\n\n  @observable\n  rows: number = 0\n\n  @observable.struct viewportSize = getViewportSize()\n  @observable isMobile: boolean = isMobileMode()\n  @observable isPortrait: boolean = isPortraitMode()\n\n  @observable\n  private view: EViews = EViews.initial\n\n  @observable\n  grid: string[][] = []\n\n  @observable\n  private cells = new Map<string, ICell>()\n\n  @computed\n  private get menuPosition(): IMenuPosition {\n    const { columns, rows, isMobile, isPortrait } = this\n\n    return getMenuPosition({ columns, rows, isMobile, isPortrait })\n  }\n\n  @computed\n  private get pageLeftCornerPosition(): IGridCell {\n    return {\n      column: 0,\n      row: 0\n    }\n  }\n\n  constructor() {\n    this.init()\n\n    this.showInitialAnimation = this.withAnimationDecorator(this.showInitialAnimation)\n\n    window.addEventListener('resize', debounce(() => {\n      this.viewportSize = getViewportSize()\n    }, 500))\n\n    reaction(() => {\n      return this.viewportSize\n    }, () => {\n      this.isMobile = isMobileMode()\n      this.isPortrait = isPortraitMode()\n      this.init()\n    })\n  }\n\n  @action\n  private initGrid() {\n    let result: string[][] = []\n\n    this.cells.clear()\n\n    for (let row = 0; row < this.rows; row++) {\n      result.push([])\n\n      for (let column = 0; column < this.columns; column++) {\n        const cellId = `${row}-${column}`\n\n        result[row].push(cellId)\n\n        this.cells.set(cellId, {\n          model: new EmptyModel()\n        })\n      }\n    }\n\n    this.grid = result\n  }\n\n  private async init() {\n    if (this.isAnimationRun) {\n      this.initWasRequested = true\n      return\n    }\n\n    const { columns, rows } = calculateGridSize(this.viewportSize)\n\n    this.columns = columns\n    this.rows = rows\n\n    this.initGrid()\n\n    if (!this.initialAnimationWasShown) {\n      await delay(1000)\n      this.showInitialAnimation()\n    }\n  }\n\n  private initialAnimationWasShown = false\n\n  private isAnimationRun = false\n  private initWasRequested = false\n\n  startAnimation() {\n    this.isAnimationRun = true\n  }\n\n  stopAnimation() {\n    this.isAnimationRun = false\n\n    if (this.initWasRequested) {\n      this.init()\n    }\n\n    this.initWasRequested = false\n  }\n\n  private withAnimationDecorator(method: Function) {\n    return async (...args: any) => {\n      this.startAnimation()\n      await method.apply(this, args)\n      this.stopAnimation()\n    }\n  }\n\n  async showInitialAnimation() {\n    const\n      { columns, rows, grid, isMobile } = this,\n      CLEAR_OFFSET = 1,\n      STEP_DELAY = isMobile ? 15 : 10,\n      midColumn = Math.floor(columns / 2),\n      midRow = Math.floor(rows / 2),\n      middleCellId = grid[midRow][midColumn],\n      middleCell = this.getCell(middleCellId),\n      helloSymbol = '✋'\n\n    {\n      const\n        scenarioConfig = { columns, rows },\n        scenario = makeSpiralScenario(scenarioConfig)\n\n      await runGridScenario(\n        scenario,\n        STEP_DELAY,\n        (data) => {\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            if (middleCellId === id) {\n              middleCell.model = new EmojiModel(helloSymbol)\n            } else {\n              cell.model = new EmojiModel(searchRandomEmoji([\n                'snow', 'happy', 'santa', 'gift', 'family', 'beer', 'coffee', 'cup tea', 'glass wine', 'celebration', 'orange fruit'\n              ]))\n            }\n          })\n        }\n      )\n    }\n\n    await delay(300)\n\n    {\n      const clear = async (vectors: I2DDirectionVector[]) => {\n        const\n          scenarioConfig: IFromCellScenarioArguments = {\n            columns, rows,\n            cell: {\n              column: midColumn,\n              row: midRow,\n            },\n            vectors,\n            minColumn: CLEAR_OFFSET,\n            minRow: CLEAR_OFFSET,\n            maxColumn: columns - CLEAR_OFFSET,\n            maxRow: rows - CLEAR_OFFSET,\n          },\n          scenario = makeFromCellScenario(scenarioConfig)\n\n        await runGridScenario(scenario, STEP_DELAY * 2.5, (data) => {\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            if (middleCellId !== id) {\n              cell.model = new EmptyModel()\n            }\n          })\n        })\n      }\n\n      !isMobile && await clear([\n        { x: 1, y: 1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n      ])\n\n      await clear([\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 1 },\n        { x: 0, y: 1 },\n      ])\n    }\n\n    middleCell.model = new HelloEmojiModel(helloSymbol)\n\n    let beforeLastAnimationTimestamp = performance.now()\n    const helloAnimationTime = parseInt(cellStyles.helloAnimationTime)\n\n    await delay(helloAnimationTime * .9)\n\n    {\n      const\n        scenarioConfig: IFromCellScenarioArguments = {\n          columns, rows, cell: { column: midColumn, row: this.rows - 1 }, vectors: [\n            { x: 0, y: -1 },\n            { x: 1, y: 0 },\n            { x: -1, y: 0 },\n          ]\n        },\n        scenario = makeFromCellScenario(scenarioConfig)\n\n      await runGridScenario(\n        scenario,\n        20,\n        (data) => {\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            cell.model = new EmptyModel()\n          })\n        }\n      )\n    }\n\n    const\n      endDelay = helloAnimationTime - (performance.now() - beforeLastAnimationTimestamp)\n\n    if (endDelay > 0) {\n      await delay(endDelay)\n    }\n\n    middleCell.model = new EmptyModel()\n\n    this.initialAnimationWasShown = true\n  }\n\n  @computed\n  get square() {\n    return this.columns * this.rows\n  }\n\n  @bind\n  getCell(id: string): ICell {\n    return this.cells.get(id)!\n  }\n}\n\nconst makeGrid = () => {\n  return new GridService()\n}\n\n\nexport default makeGrid\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { minCellSize } = gridStyle\n\nexport const\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","export type TScenarioValue = any | Function\nexport type TScenario = { delay?: number, value: TScenarioValue }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield typeof value === 'function' ? value() : value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => boolean) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    const breakScenario = process(item)\n    if (breakScenario) break\n  }\n}\n","import { isEqual, uniqWith } from 'lodash'\nimport { MIN_CELL_SIZE } from '../constants'\nimport { delay } from './scenario'\n\nexport const getViewportSize = (): IViewportSize => {\n  const { innerHeight: viewportHeight, innerWidth: viewportWidth } = window\n\n  return {\n    viewportWidth,\n    viewportHeight,\n  }\n}\n\nexport const isPortraitMode = (): boolean => {\n  const { viewportWidth, viewportHeight } = getViewportSize()\n\n  return viewportWidth > viewportHeight\n}\n\nexport const isMobileMode = (): boolean => {\n  const\n    { minColumns, minRows } = getDesktopMinColumnsAndRows(),\n    { viewportHeight, viewportWidth } = getViewportSize()\n\n  return viewportWidth <= MIN_CELL_SIZE * minColumns || viewportHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 12,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => {\n  const isPortrait = isPortraitMode()\n\n\n  return {\n    minColumns: isPortrait ? 8 : 7,\n    minRows: isPortrait ? 7 : 8,\n  }\n}\n\nexport const getMinGridSize = () => (\n  isMobileMode() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nexport const calculateGridSize = ({ viewportWidth, viewportHeight }: IViewportSize): IGridParams => {\n  const\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(viewportHeight / minRows, viewportWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n\n  let\n    columns = Math.round(viewportWidth / gridItemSize),\n    rows = Math.round(viewportHeight / gridItemSize)\n\n  if (columns >= 25) {\n    columns = 25\n  } else if (columns <= minColumns) {\n    columns = minColumns\n  } else if (!(columns % 2)) {\n    columns++\n  }\n\n  if (rows >= 25) {\n    rows = 25\n  } else if (rows <= minRows) {\n    rows = minRows\n  } else if (!(rows % 2)) {\n    rows--\n  }\n\n  return {\n    columns,\n    rows,\n  }\n}\n\nexport const makeSpiralScenario = ({ columns, rows }: IGridParams) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      column = -1,\n      row = 0,\n      minColumn = 0,\n      minRow = 0,\n      maxColumn = columns,\n      maxRow = rows,\n      vector: I2DDirectionVector = {\n        x: 1,\n        y: 0\n      }\n\n    const\n      getVectorX = () => vector.x,\n      getVectorY = () => vector.y,\n      getNext = (): { nextX: number, nextY: number } | null => {\n        const\n          nextX = column + getVectorX(),\n          nextY = row + getVectorY()\n\n        if (getVectorY() === 0) {\n          if (minColumn === maxColumn) return null\n\n          if (nextX >= maxColumn) {\n            vector = {\n              x: 0,\n              y: 1,\n            }\n            minRow++\n            return getNext()\n          }\n\n          if (nextX < minColumn) {\n            vector = {\n              x: 0,\n              y: -1,\n            }\n            maxRow--\n            return getNext()\n          }\n        }\n\n        if (getVectorX() === 0) {\n          if (minRow === maxRow) return null\n\n          if (nextY >= maxRow) {\n            vector = {\n              x: -1,\n              y: 0,\n            }\n            maxColumn--\n            return getNext()\n          }\n\n          if (nextY < minRow) {\n            vector = {\n              x: 1,\n              y: 0,\n            }\n            minColumn++\n            return getNext()\n          }\n        }\n\n        return { nextX, nextY }\n      }\n\n    while (true) {\n      const next = getNext()\n\n      if (!next) break\n\n      const { nextX, nextY } = next\n\n      column = nextX\n      row = nextY\n\n      yield [{ column, row }]\n    }\n  }\n})\n\nexport const makeFromCellScenario = (\n  { columns, rows, cell, vectors, minColumn, minRow, maxColumn, maxRow }: IFromCellScenarioArguments\n) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      previousCells = [cell]\n\n    const\n      _minColumn = minColumn ? minColumn : 0,\n      _maxColumn = maxColumn ? maxColumn - 1 : columns - 1,\n      _minRow = minRow ? minRow : 0,\n      _maxRow = maxRow ? maxRow - 1 : rows - 1,\n      filteredVectors = uniqWith(\n        vectors.filter(\n          vector => !(vector.x === vector.y && vector.x === 0)\n        ),\n        isEqual\n      ),\n      yieldedCells = [{ ...cell }],\n      getNext = () => {\n        const nextCells: IGridCell[] = []\n\n        filteredVectors.forEach(vector => {\n          previousCells.forEach(({ column, row }) => {\n            if (\n              (vector.x === -1 && column <= cell.column) ||\n              (vector.x === 1 && column >= cell.column) ||\n              (vector.y === -1 && row <= cell.row) ||\n              (vector.y === 1 && row >= cell.row)\n            ) {\n              const cell = {\n                column: column + vector.x,\n                row: row + vector.y,\n              }\n\n              if (yieldedCells.find(({ column, row }) => column === cell.column && row === cell.row)) return\n\n              yieldedCells.push(cell)\n              nextCells.push(cell)\n            }\n          })\n        })\n\n        const filtered = uniqWith(\n          nextCells.filter(\n            ({ column, row }) =>\n              (column >= _minColumn && row >= _minRow && column <= _maxColumn && row <= _maxRow)\n          ),\n          isEqual\n        )\n\n        if (!filtered.length) return null\n\n        return filtered\n      }\n\n    yield [{ ...cell }]\n\n    while (true) {\n      const nextCells = getNext()\n\n      if (!nextCells) break\n\n      yield nextCells\n\n      previousCells = nextCells\n    }\n  }\n})\n\nexport const runGridScenario = async (\n  scenario: AsyncIterable<IGridCell[]>,\n  stepDelay: number,\n  process: (data: IGridCell[]) => true | void\n) => {\n  for await (const data of scenario) {\n    const result = process(data)\n\n    if (result) break\n\n    if (stepDelay > 0) {\n      await delay(stepDelay)\n    }\n  }\n}\n\nexport const getFilledMatrix = <T>({ columns, rows, value }: IGridParams & { value: T }): T[][] => {\n  const result: T[][] = []\n\n  for (let row = 0; row < rows; row++) {\n    result.push([])\n    for (let column = 0; column < columns; column++) {\n      result[row].push(value)\n    }\n  }\n\n  return result\n}\n\nexport const getMenuPosition =\n  ({ columns, rows, isMobile, isPortrait }: IGetMenuPositionArguments): IMenuPosition => {\n    if (!isMobile || (isMobile && !isPortrait)) {\n      return {\n        column: columns - 1,\n        row: 1,\n        vector: {\n          x: 0,\n          y: 1,\n        },\n      }\n    } else {\n      return {\n        column: 1,\n        row: rows - 1,\n        vector: {\n          x: 1,\n          y: 0,\n        }\n      }\n    }\n  }\n","export const getOrderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const getRandomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n\nexport const getRandomArrayItem = <T>(array: T[]): T => array[getRandomInteger(array.length - 1)]\n","import { getRandomArrayItem } from './misc'\nimport { emojiIndex } from 'emoji-mart'\n\nexport const searchRandomEmoji = (() => {\n  const\n    cache = new Map(),\n    getSearchResults = (searchString: string): string[] => {\n      const fromCache = cache.get(searchString)\n\n      if (fromCache) {\n        return fromCache\n      }\n\n      // @ts-ignore\n      const searchResults = emojiIndex.search(searchString).map((item) => item.native)\n\n      // console.log(searchString, searchResults)\n\n      cache.set(searchString, searchResults)\n\n      return searchResults\n    }\n\n  return (searchStrings: string[]): string => {\n    return getRandomArrayItem(searchStrings.map(getSearchResults).flat())\n  }\n})()\n","export class EmptyModel {\n  readonly isEmpty = true\n}\n\nexport class EmojiModel {\n  readonly isEmoji: true = true\n\n  constructor(public content: string) {\n  }\n}\n\nexport class HelloEmojiModel extends EmojiModel {\n  public isHello = true\n}\n\nexport class TextModel {\n  readonly isText: true = true\n\n  constructor(public content: string) {\n  }\n}\n\nexport type TCellModel = EmptyModel | EmojiModel | TextModel | HelloEmojiModel\n","export default function <T extends Function>(\n  target: object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n): TypedPropertyDescriptor<T> | void {\n  return {\n    configurable: true,\n    get(this: T): T {\n      const value = descriptor.value!.bind(this)\n\n      Object.defineProperty(this, propertyKey, {\n        value,\n        configurable: true,\n        writable: true,\n      })\n      return value\n    },\n  }\n}\n","import React from 'react'\nimport makeGrid, { GridService } from '../services/GridService' // 6.x or mobx-react-lite@1.4.0\nimport { useLocalStore } from 'mobx-react'\n\nconst gridContext = React.createContext<GridService | null>(null)\n\nexport const GridProvider: React.FC = ({ children }) => {\n  const store = useLocalStore(makeGrid)\n  return <gridContext.Provider value={store}>{children}</gridContext.Provider>\n}\n\nexport const useGrid = () => {\n  const store = React.useContext(gridContext)\n\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useGrid must be used within a GridProvider.')\n  }\n\n  return store\n}\n","import React from 'react'\nimport styles from './Cell.module.scss'\nimport { observer } from 'mobx-react'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport classNames from 'classnames'\nimport { EmojiModel, EmptyModel, HelloEmojiModel, TCellModel, TextModel } from '../../models/cell'\n\nconst CellWrap: React.FC = ({ children }) => (\n  <div className={styles.cell}>\n    {children}\n  </div>\n)\n\nconst CellComponentFactory = observer(({ id }: { id: string }) => {\n  const\n    { getCell } = useGrid(),\n    model: TCellModel = getCell(id).model\n\n  let component\n\n  if (model instanceof EmojiModel) {\n    component = <Emoji {...model}/>\n  }\n\n  if (model instanceof HelloEmojiModel) {\n    component = <HelloEmoji {...model}/>\n  }\n\n  if (model instanceof TextModel) {\n    component = <Text {...model}/>\n  }\n\n  if (model instanceof EmptyModel) {\n    component = <></>\n  }\n\n  return (\n    <CellWrap>\n      {component}\n    </CellWrap>\n  )\n})\n\nconst Emoji: React.FC<EmojiModel> = (model) => (\n  <div className={classNames(styles.cellEmoji)}>\n    {model.content}\n  </div>\n)\n\nconst HelloEmoji: React.FC<HelloEmojiModel> = (model) => (\n  <div className={classNames(styles.cellEmoji, styles.cellHelloEmoji)}>\n    {model.content}\n  </div>\n)\n\nconst Text: React.FC<TextModel> = (model) => (\n  <div className={styles.cellText}>\n    {model.content}\n  </div>\n)\n\nexport default CellComponentFactory\n","import React from 'react'\n\ninterface IHocProps {\n}\n\nconst withContainerClass = <P extends object>(Component: React.ComponentType<P>, selector: string, className: string) => {\n  class HocComponent extends React.Component<P & IHocProps> {\n    constructor(props: P & IHocProps) {\n      super(props)\n\n      const element = this.element\n\n      element && element.classList.add(className)\n    }\n\n    get element(): Element | null {\n      const\n        element = document.querySelector(selector)\n\n      return element || null\n    }\n\n    componentWillUnmount(): void {\n      const element = this.element\n\n      element && element.classList.remove(className)\n    }\n\n    render() {\n      return (\n        <Component {...this.props as P} />\n      )\n    }\n  }\n\n  return HocComponent\n}\n\nexport default withContainerClass\n","import React from 'react'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport Cell from '../Cell'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport { observer } from 'mobx-react'\nimport withContainerClass from '../../hoc/withContainerClass'\n\nconst Grid = observer(() => {\n  const { grid } = useGrid()\n\n  return (\n    <div className={styles.grid}>\n      {\n        grid.map((columns, row) => (\n          <Row key={row}>\n            {\n              columns.map((id, column) => (\n                <Col key={column}>\n                  <Cell id={id}/>\n                </Col>\n              ))\n            }\n          </Row>\n        ))\n      }\n    </div>\n  )\n})\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst Col: React.FC = ({ children }) => {\n  return (\n    <div\n      className={\n        classNames(styles.col)\n      }\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default withContainerClass(Grid, 'html', styles.gridWrapper)\n","import React from 'react'\nimport Grid from './components/Grid'\nimport withGridContext from './hoc/withGridContext'\n\nconst GridWithContext = withGridContext(Grid)\n\nconst App: React.FC = () => {\n  return (\n    <GridWithContext/>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { GridProvider } from '../contextProviders/GridProvider'\n\ninterface IHocProps {\n}\n\nconst withGridContext = <P extends object>(Component: React.ComponentType<P>) => {\n  const\n    HocComponent: React.FC<P & IHocProps> = ({ ...props }) => {\n      return (\n        <GridProvider>\n          <Component {...props as P} />\n        </GridProvider>\n      )\n    }\n\n  return HocComponent\n}\n\nexport default withGridContext\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"helloAnimationTime\":\"1200\",\"cell\":\"Cell_cell__2Y63x\",\"cellEmoji\":\"Cell_cellEmoji__210BA\",\"cellHelloEmoji\":\"Cell_cellHelloEmoji__Khd3i\",\"hello-animation\":\"Cell_hello-animation__zIPad\",\"cellMenu\":\"Cell_cellMenu__2IVHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"gridWrapper\":\"Grid_gridWrapper__Rwaf7\",\"grid\":\"Grid_grid__24j1p\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\"};"],"sourceRoot":""}