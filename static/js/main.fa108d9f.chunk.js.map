{"version":3,"sources":["components/Grid/Grid.module.scss","helpers/misc.ts","components/Flipper/Flipper.tsx","constants.ts","helpers/grid.ts","components/Grid/Grid.tsx","helpers/scenario.ts","App.tsx","serviceWorker.ts","index.tsx","components/Flipper/Flipper.module.scss"],"names":["module","exports","orderedArray","count","Array","from","keys","Flipper","props","flip","setState","prevState","state","rowsCount","columnsCount","x","y","middleX","Math","floor","middleY","console","log","iterationDuration","max","setTimeout","setInterval","abs","this","className","classNames","styles","flipper","flipDirectionClass","isFlipped","onClick","flipperIn","flipperSide","diffX","diffY","React","Component","maxCellSize","gridStyle","minCellSize","MAX_CELL_SIZE","parseInt","MIN_CELL_SIZE","getMinAndMaxCellSize","getMinGridSize","minColumns","minRows","window","innerWidth","innerHeight","isMobile","calculateGridSize","windowHeight","windowWidth","getWindowSize","gridItemSize","min","columns","round","rows","calculateGrid","Grid","grid","onWindowResize","onWindowResizeDebounced","debounce","addEventListener","removeEventListener","rowsArray","gridRows","columnsArray","gridColumns","gridIn","map","row","key","column","length","Row","children","getRandomFloatingClass","random","Col","useState","isEmpty","floatingClass","useMemo","col","colIn","delay","ms","Promise","resolve","makeScenario","scenarios","Symbol","asyncIterator","a","i","sceneDelay","value","runScenario","scenes","process","async","scenario","App","useEffect","then","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa108d9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"50px\",\"maxCellSize\":\"100px\",\"grid\":\"Grid_grid__24j1p\",\"gridIn\":\"Grid_gridIn__2Raaz\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\",\"isFloating1\":\"Grid_isFloating1__20oI4\",\"floating-1\":\"Grid_floating-1__1dRll\",\"isFloating2\":\"Grid_isFloating2__1eMuV\",\"floating-2\":\"Grid_floating-2__25ATD\",\"isFloating3\":\"Grid_isFloating3__1prHf\",\"floating-3\":\"Grid_floating-3__1cUcQ\",\"isFloating4\":\"Grid_isFloating4__Ck5IM\",\"floating-4\":\"Grid_floating-4__1OzQw\",\"isFloating5\":\"Grid_isFloating5__3C1TG\",\"floating-5\":\"Grid_floating-5__3QYP9\",\"isFloating6\":\"Grid_isFloating6__JcZcL\",\"floating-6\":\"Grid_floating-6__2keIC\",\"isFloating7\":\"Grid_isFloating7__1EbOc\",\"floating-7\":\"Grid_floating-7__1hJ9u\",\"isFloating8\":\"Grid_isFloating8__3ccTU\",\"floating-8\":\"Grid_floating-8__2tMjq\",\"isFloating9\":\"Grid_isFloating9__3JlyO\",\"floating-9\":\"Grid_floating-9__1-RLT\",\"isFloating10\":\"Grid_isFloating10__32WJ3\",\"floating-10\":\"Grid_floating-10__5rQpD\",\"colIn\":\"Grid_colIn__1AHxM\"};","export const orderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const randomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './Flipper.module.scss'\n\ninterface IProps {\n  rowsCount: number,\n  columnsCount: number,\n  x: number,\n  y: number\n}\n\ninterface IState {\n  flip: boolean\n}\n\nexport default class Flipper extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {\n      flip: false,\n    }\n\n    const { rowsCount, columnsCount, x, y } = props\n\n    const\n      middleX = Math.floor(columnsCount / 2),\n      middleY = Math.floor(rowsCount / 2)\n\n    const delayStep = 400\n\n    console.log(middleX, middleY)\n\n    const iterationDuration = Math.max(middleX, middleY) * delayStep\n\n    setTimeout(() => {\n      setInterval(this.flip, iterationDuration)\n    }, (Math.abs(middleX - x) + Math.abs(middleY - y)) * delayStep)\n  }\n\n  flip = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      flip: !prevState.flip\n    }))\n  }\n\n  get flipDirectionClass() {\n    const { rowsCount, columnsCount, x, y } = this.props\n\n    const\n      middleX = Math.floor(columnsCount / 2),\n      middleY = Math.floor(rowsCount / 2),\n      diffX = x - middleX,\n      diffY = y - middleY\n\n    if (diffX === diffY) {\n      //middle\n      if (diffX === 0 && diffY === 0) {\n        return 'flipDirection4'\n      }\n\n      //corners\n      if (x < middleX) {\n        if (y < middleY) {\n          //to left top\n          return 'flipDirection1'\n        } else {\n          //to left bottom\n          return 'flipDirection7'\n        }\n      } else {\n        if (y < middleY) {\n          //to right top\n          return 'flipDirection3'\n        } else {\n          //to right bottom\n          return 'flipDirection5'\n        }\n      }\n    } else {\n      if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX < 0) {\n          return 'flipDirection8'\n        } else {\n          return 'flipDirection4'\n        }\n      } else {\n        if (diffY < 0) {\n          return 'flipDirection2'\n        } else {\n          return 'flipDirection6'\n        }\n      }\n    }\n  }\n\n  render() {\n    const { flip } = this.state\n\n    return (\n      <div className={classNames(styles.flipper, styles[this.flipDirectionClass], flip && styles.isFlipped)}\n           onClick={this.flip}>\n        <div className={styles.flipperIn}>\n          <div className={styles.flipperSide}>\n          </div>\n\n          <div className={styles.flipperSide}>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { maxCellSize, minCellSize } = gridStyle\n\nexport const\n  MAX_CELL_SIZE = parseInt(maxCellSize),\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","import { MAX_CELL_SIZE, MIN_CELL_SIZE } from '../constants'\n\nexport interface IGridParams {\n  columns: number\n  rows: number\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 11,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => ({\n  minColumns: 7,\n  minRows: 7,\n})\n\nconst getMinAndMaxCellSize = () => ({\n  MIN_CELL_SIZE,\n  MAX_CELL_SIZE\n})\n\nexport const isMobile = () => {\n  const\n    { MIN_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getDesktopMinColumnsAndRows()\n\n  return window.innerWidth <= MIN_CELL_SIZE * minColumns || window.innerHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getMinGridSize = () => (\n  isMobile() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nconst getWindowSize = () => {\n  const { innerHeight: windowHeight, innerWidth: windowWidth } = window\n\n  return {\n    windowWidth,\n    windowHeight,\n  }\n}\n\nexport const calculateGridSize = (): IGridParams => {\n  const\n    { windowWidth, windowHeight } = getWindowSize(),\n    { MIN_CELL_SIZE, MAX_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(windowHeight / minRows, windowWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n  if (gridItemSize > MAX_CELL_SIZE) gridItemSize = MAX_CELL_SIZE\n\n  const\n    columns = Math.min(Math.max(Math.round(windowWidth / gridItemSize), minColumns), 45),\n    rows = Math.min(Math.max(Math.round(windowHeight / gridItemSize), minRows), 30)\n\n  return {\n    columns,\n    rows,\n  }\n}\n","import React, { useMemo, useState } from 'react'\nimport { debounce } from 'lodash'\nimport { orderedArray } from '../../helpers/misc'\nimport Flipper from '../Flipper'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport { calculateGridSize } from '../../helpers/grid'\n\ninterface IProps {\n}\n\nconst calculateGrid = () => calculateGridSize()\n\nclass Grid extends React.Component<IProps> {\n  state = {\n    grid: calculateGrid()\n  }\n\n  get gridRows() {\n    return orderedArray(this.state.grid.rows)\n  }\n\n  get gridColumns() {\n    return orderedArray(this.state.grid.columns)\n  }\n\n  onWindowResize = () => {\n    this.setState({\n      grid: calculateGrid()\n    })\n  }\n\n  onWindowResizeDebounced = debounce(this.onWindowResize, 400)\n\n  componentDidMount(): void {\n    window.addEventListener('resize', this.onWindowResizeDebounced)\n  }\n\n  componentWillUnmount(): void {\n    window.removeEventListener('resize', this.onWindowResizeDebounced)\n  }\n\n  render() {\n    const\n      rowsArray = this.gridRows,\n      columnsArray = this.gridColumns\n\n    return (\n      <div className={styles.grid}>\n        <div className={styles.gridIn}>\n          {\n            rowsArray.map(row => (\n              <Row key={row}>\n                {\n                  columnsArray.map(column => (\n                    <Col key={column}>\n                      <Flipper\n                        x={column}\n                        y={row}\n                        columnsCount={columnsArray.length}\n                        rowsCount={rowsArray.length}\n                      />\n                    </Col>\n                  ))\n                }\n              </Row>\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst getRandomFloatingClass = () => styles[`isFloating${Math.round(10 * Math.random())}`]\n\nconst Col: React.FC = ({ children }) => {\n  const\n    [isEmpty] = useState(true),\n    floatingClass = useMemo(getRandomFloatingClass, [isEmpty])\n\n  return (\n    <div\n      className={\n        classNames(styles.col, isEmpty && floatingClass)\n      }\n    >\n      <div className={styles.colIn}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Grid\n","export type TScenarioValue = any | Function\nexport type TScenario = { delay?: number, value: TScenarioValue }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield typeof value === 'function' ? value() : value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => boolean) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    const breakScenario = process(item)\n    if (breakScenario) break\n  }\n}\n","import React, { useEffect } from 'react'\nimport Grid from './components/Grid'\nimport { runScenario } from './helpers/scenario'\n\nconst App: React.FC = () => {\n  useEffect(() => {\n    console.log('something happends')\n  })\n\n  return (\n    <Grid/>\n  )\n}\n\nexport default App\n\nconst run = async () => {\n  await runScenario([\n    { delay: 1000, value: () => 'function' },\n    { delay: 1000, value: 2 },\n    { delay: 1000, value: 3 },\n    { delay: 1000, value: 4 },\n    { delay: 1000, value: () => 'function' },\n  ], value => {\n    console.log(value)\n\n    return false\n  })\n}\n\nrun().then(() => {\n  console.log('finally')\n})\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flipper\":\"Flipper_flipper__14-7N\",\"isIcon\":\"Flipper_isIcon__3scFd\",\"isImage\":\"Flipper_isImage__1dr-L\",\"flipperIn\":\"Flipper_flipperIn__ydsnX\",\"flipperSide\":\"Flipper_flipperSide__3bjKX\",\"isFlipped\":\"Flipper_isFlipped__2fwGj\",\"flipDirection1\":\"Flipper_flipDirection1__2CX0R\",\"flipDirection5\":\"Flipper_flipDirection5__3erTy\",\"flipDirection2\":\"Flipper_flipDirection2__23wn4\",\"flipDirection6\":\"Flipper_flipDirection6__36758\",\"flipDirection3\":\"Flipper_flipDirection3__QaEeh\",\"flipDirection7\":\"Flipper_flipDirection7__2SYue\",\"flipDirection4\":\"Flipper_flipDirection4__14e5g\",\"flipDirection8\":\"Flipper_flipDirection8__8I0LX\"};"],"sourceRoot":""}