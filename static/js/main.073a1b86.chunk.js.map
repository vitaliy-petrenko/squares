{"version":3,"sources":["services/GridService.ts","constants.ts","helpers/scenario.ts","helpers/grid.ts","helpers/misc.ts","helpers/emoji.ts","decorators/bind.ts","contextProviders/GridProvider.tsx","components/Cell/Cell.tsx","components/Grid/Grid.tsx","App.tsx","hoc/withGridContext.tsx","serviceWorker.ts","index.tsx","components/Grid/Grid.module.scss","components/Cell/Cell.module.scss"],"names":["EViews","maxCellSize","gridStyle","minCellSize","MAX_CELL_SIZE","parseInt","MIN_CELL_SIZE","delay","ms","Promise","resolve","setTimeout","getViewportSize","window","viewportHeight","innerHeight","viewportWidth","innerWidth","getMobileMinColumnsAndRows","isPortrait","isPortraitMode","minColumns","minRows","getMinAndMaxCellSize","isMobile","calculateGridSize","gridItemSize","Math","min","columns","round","rows","console","log","makeSpiralScenario","Symbol","asyncIterator","a","column","row","minColumn","minRow","maxColumn","maxRow","vector","x","y","getVectorX","getVectorY","getNext","nextX","nextY","next","makeFromCellScenario","cell","vectors","previousCells","_minColumn","_maxColumn","_minRow","_maxRow","filteredVectors","uniqWith","filter","isEqual","yieldedCells","nextCells","forEach","find","push","filtered","length","runGridScenario","scenario","stepDelay","process","async","getRandomArrayItem","array","max","rand","random","getRandomInteger","searchRandomEmoji","cache","Map","getSearchResults","searchString","fromCache","get","searchResults","emojiIndex","search","map","item","native","set","searchStrings","flat","GridService","observable","struct","menuPosition","pagePosition","initialAnimationWasShown","isAnimationRun","initWasRequested","this","init","addEventListener","debounce","viewportSize","reaction","result","cells","clear","cellId","attributes","grid","initGrid","showInitialAnimation","startAnimation","CLEAR_OFFSET","STEP_DELAY","midCol","floor","midRow","middleCellId","middleCell","getCell","data","id","applyCellEmoji","clearCell","applyCellAttributes","isHello","beforeLastAnimationTimestamp","performance","now","stop","endDelay","cellStyles","helloAnimationTime","stopAnimation","initial","action","computed","target","propertyKey","descriptor","configurable","value","bind","Object","defineProperty","writable","merge","emoji","isEmoji","content","makeGrid","gridContext","React","createContext","GridProvider","children","store","useLocalStore","Provider","useGrid","useContext","Error","CellFactory","observer","child","isText","className","styles","Emoji","classNames","cellEmoji","Text","cellText","Grid","key","Cell","Row","Col","col","GridWithContext","Component","props","withGridContext","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.073a1b86.chunk.js","sourcesContent":["import { action, computed, observable, reaction } from 'mobx'\nimport {\n  calculateGridSize,\n  getViewportSize,\n  isMobile,\n  makeFromCellScenario,\n  makeSpiralScenario,\n  runGridScenario\n} from '../helpers/grid'\nimport { debounce } from 'lodash'\nimport { searchRandomEmoji } from '../helpers/emoji'\nimport { delay } from '../helpers/scenario'\nimport bind from '../decorators/bind'\nimport cellStyles from '../components/Cell/Cell.module.scss'\n\nexport enum EViews { initial, application, snake }\n\nexport class GridService {\n  @observable\n  columns: number = 0\n\n  @observable\n  rows: number = 0\n\n  @observable.struct viewportSize = getViewportSize()\n  @observable isMobile: boolean = false\n\n  @observable\n  private view: EViews = EViews.initial\n\n  @observable\n  grid: string[][] = []\n\n  @observable\n  private cells = new Map<string, ICell>()\n\n  private menuPosition: IGridCell = {\n    column: 0,\n    row: 0\n  }\n\n  private pagePosition: IGridCell = {\n    column: 0,\n    row: 0\n  }\n\n  @action\n  private initGrid() {\n    let result: string[][] = []\n\n    this.cells.clear()\n\n    for (let row = 0; row < this.rows; row++) {\n      result.push([])\n\n      for (let column = 0; column < this.columns; column++) {\n        const cellId = `${row}-${column}`\n\n        result[row].push(cellId)\n\n        this.cells.set(cellId, {\n          attributes: {}\n        })\n      }\n    }\n\n    this.grid = result\n  }\n\n  @action\n  private async init() {\n    if (this.isAnimationRun) {\n      this.initWasRequested = true\n      return\n    }\n\n    const { columns, rows } = calculateGridSize(this.viewportSize)\n\n    this.columns = columns\n    this.rows = rows\n\n    this.initGrid()\n\n    if (!this.initialAnimationWasShown) {\n      await delay(1000)\n      this.showInitialAnimation()\n    }\n  }\n\n  private initialAnimationWasShown = false\n\n  private isAnimationRun = false\n  private initWasRequested = false\n\n  @action\n  private startAnimation() {\n    this.isAnimationRun = true\n  }\n\n  @action\n  private stopAnimation() {\n    this.isAnimationRun = false\n\n    if (this.initWasRequested) {\n      this.init()\n    }\n\n    this.initWasRequested = false\n  }\n\n  @action\n  async showInitialAnimation() {\n    this.startAnimation()\n\n    const\n      { columns, rows, grid, isMobile } = this,\n      CLEAR_OFFSET = 1,\n      STEP_DELAY = isMobile ? 15 : 10,\n      midCol = Math.floor(columns / 2),\n      midRow = Math.floor(rows / 2),\n      middleCellId = grid[midRow][midCol],\n      middleCell = this.getCell(middleCellId),\n      middleCellEmoji = '✋'\n\n    {\n      const\n        scenarioConfig = { columns, rows },\n        scenario = makeSpiralScenario(scenarioConfig)\n\n      await runGridScenario(\n        scenario,\n        STEP_DELAY,\n        (data) => {\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            if (middleCellId === id) {\n              applyCellEmoji(cell, middleCellEmoji)\n            } else {\n              applyCellEmoji(cell, searchRandomEmoji([\n                'snow', 'happy', 'santa', 'gift', 'family', 'beer', 'coffee', 'cup tea', 'glass wine', 'celebration', 'orange fruit'\n              ]))\n            }\n          })\n        }\n      )\n    }\n\n    this.initialAnimationWasShown = true\n\n    await delay(300)\n\n    {\n      const clear = async (vectors: I2DVector[]) => {\n        const\n          scenarioConfig: IFromCellScenarioArguments = {\n            columns, rows,\n            cell: {\n              column: midCol,\n              row: midRow,\n            },\n            vectors,\n            minColumn: CLEAR_OFFSET,\n            minRow: CLEAR_OFFSET,\n            maxColumn: columns - CLEAR_OFFSET,\n            maxRow: rows - CLEAR_OFFSET,\n          },\n          scenario = makeFromCellScenario(scenarioConfig)\n\n        await runGridScenario(scenario, STEP_DELAY * 2.5, (data) => {\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            if (middleCellId !== id) {\n              clearCell(cell)\n            }\n          })\n        })\n      }\n\n      !isMobile && await clear([\n        { x: 1, y: 1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n      ])\n\n      await clear([\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 1 },\n        { x: 0, y: 1 },\n      ])\n    }\n\n    applyCellAttributes(middleCell, {\n      isHello: true\n    })\n\n    let beforeLastAnimationTimestamp = performance.now()\n\n    await delay(400)\n\n    {\n      const\n        scenarioConfig = { columns, rows },\n        scenario = makeSpiralScenario(scenarioConfig)\n\n      await runGridScenario(\n        scenario,\n        20,\n        (data) => {\n          let stop = false\n\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            clearCell(cell)\n\n            stop = row === CLEAR_OFFSET && column === CLEAR_OFFSET - 1\n          })\n\n          if (stop) return true\n        }\n      )\n    }\n\n    const\n      endDelay = parseInt(cellStyles.helloAnimationTime) - (performance.now() - beforeLastAnimationTimestamp)\n\n    if (endDelay > 0) {\n      await delay(endDelay)\n    }\n\n    clearCell(middleCell)\n\n    this.stopAnimation()\n  }\n\n  @computed\n  get square() {\n    return this.columns * this.rows\n  }\n\n  @bind\n  getCell(id: string) {\n    return this.cells.get(id)!\n  }\n\n  constructor() {\n    this.isMobile = isMobile()\n\n    this.init()\n\n    window.addEventListener('resize', debounce(() => {\n      this.viewportSize = getViewportSize()\n    }, 500))\n\n    reaction(() => {\n      return this.viewportSize\n    }, () => {\n      this.isMobile = isMobile()\n      this.init()\n    })\n  }\n}\n\nconst makeGrid = () => {\n  return new GridService()\n}\n\nconst applyCellAttributes = (cell: ICell, attributes: ICellAttributes, merge: boolean = true): void => {\n  if (merge) {\n    cell.attributes = {\n      ...cell.attributes,\n      ...attributes\n    }\n  } else {\n    cell.attributes = {\n      ...attributes,\n    }\n  }\n}\n\nconst clearCell = (cell: ICell): void => {\n  cell.attributes = {}\n}\n\nconst applyCellEmoji = (cell: ICell, emoji: string): void => applyCellAttributes(cell, {\n  isEmoji: true,\n  content: emoji,\n}, false)\n\nexport default makeGrid\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { maxCellSize, minCellSize } = gridStyle\n\nexport const\n  MAX_CELL_SIZE = parseInt(maxCellSize),\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","export type TScenarioValue = any | Function\nexport type TScenario = { delay?: number, value: TScenarioValue }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield typeof value === 'function' ? value() : value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => boolean) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    const breakScenario = process(item)\n    if (breakScenario) break\n  }\n}\n","import { isEqual, uniqWith } from 'lodash'\nimport { MAX_CELL_SIZE, MIN_CELL_SIZE } from '../constants'\nimport { delay } from './scenario'\n\nexport const getViewportSize = (): IViewportSize => {\n  const { innerHeight: viewportHeight, innerWidth: viewportWidth } = window\n\n  return {\n    viewportWidth,\n    viewportHeight,\n  }\n}\n\nconst isPortraitMode = (): boolean => {\n  const { viewportWidth, viewportHeight } = getViewportSize()\n\n  return viewportWidth > viewportHeight\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 12,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => {\n  const isPortrait = isPortraitMode()\n\n\n  return {\n    minColumns: isPortrait ? 8 : 7,\n    minRows: isPortrait ? 7 : 8,\n  }\n}\n\nconst getMinAndMaxCellSize = () => ({\n  MIN_CELL_SIZE,\n  MAX_CELL_SIZE\n})\n\nexport const isMobile = () => {\n  const\n    { MIN_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getDesktopMinColumnsAndRows(),\n    { viewportHeight, viewportWidth } = getViewportSize()\n\n  return viewportWidth <= MIN_CELL_SIZE * minColumns || viewportHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getMinGridSize = () => (\n  isMobile() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nexport const calculateGridSize = ({ viewportWidth, viewportHeight }: IViewportSize): IGridParams => {\n  const\n    { MIN_CELL_SIZE, MAX_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(viewportHeight / minRows, viewportWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n  if (gridItemSize > MAX_CELL_SIZE) gridItemSize = MAX_CELL_SIZE\n\n  let\n    columns = Math.round(viewportWidth / gridItemSize),\n    rows = Math.round(viewportHeight / gridItemSize)\n\n  if (columns > 25) {\n    columns = 25\n  } else if (columns < minColumns) {\n    columns = minColumns\n  } else if (!(columns % 2)) {\n    columns++\n  }\n\n  if (rows > 25) {\n    rows = 25\n  } else if (rows < minRows) {\n    rows = minRows\n  } else if (!(rows % 2)) {\n    rows--\n  }\n\n  console.log(columns, rows)\n\n  return {\n    columns,\n    rows,\n  }\n}\n\n\n/**\n 1 2 3\n 8 x 4\n 7 6 5\n */\n\nexport const getFlipDirectionKey = ({ x, y }: I2DVector): number => {\n  if (x === 1) {\n    if (y === 0) {\n      return 4\n    } else if (y === 1) {\n      return 5\n    } else {\n      return 3\n    }\n  } else if (x === 0) {\n    if (y === 1) {\n      return 6\n    } else if (y === 0) {\n      return 4\n    } else {\n      return 2\n    }\n  } else {\n    if (y === 0) {\n      return 8\n    } else if (y === 1) {\n      return 7\n    } else {\n      return 1\n    }\n  }\n}\n\nexport const makeSpiralScenario = ({ columns, rows }: IGridParams) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      column = -1,\n      row = 0,\n      minColumn = 0,\n      minRow = 0,\n      maxColumn = columns,\n      maxRow = rows,\n      vector: I2DVector = {\n        x: 1,\n        y: 0\n      }\n\n    const\n      getVectorX = () => vector.x,\n      getVectorY = () => vector.y,\n      getNext = (): { nextX: number, nextY: number } | null => {\n        const\n          nextX = column + getVectorX(),\n          nextY = row + getVectorY()\n\n        if (getVectorY() === 0) {\n          if (minColumn === maxColumn) return null\n\n          if (nextX >= maxColumn) {\n            vector = {\n              x: 0,\n              y: 1,\n            }\n            minRow++\n            return getNext()\n          }\n\n          if (nextX < minColumn) {\n            vector = {\n              x: 0,\n              y: -1,\n            }\n            maxRow--\n            return getNext()\n          }\n        }\n\n        if (getVectorX() === 0) {\n          if (minRow === maxRow) return null\n\n          if (nextY >= maxRow) {\n            vector = {\n              x: -1,\n              y: 0,\n            }\n            maxColumn--\n            return getNext()\n          }\n\n          if (nextY < minRow) {\n            vector = {\n              x: 1,\n              y: 0,\n            }\n            minColumn++\n            return getNext()\n          }\n        }\n\n        return { nextX, nextY }\n      }\n\n    while (true) {\n      const next = getNext()\n\n      if (!next) break\n\n      const { nextX, nextY } = next\n\n      column = nextX\n      row = nextY\n\n      yield [{ column, row }]\n    }\n  }\n})\n\nexport const makeFromCellScenario = (\n  { columns, rows, cell, vectors, minColumn, minRow, maxColumn, maxRow }: IFromCellScenarioArguments\n) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      previousCells = [cell]\n\n    const\n      _minColumn = minColumn ? minColumn : 0,\n      _maxColumn = maxColumn ? maxColumn - 1 : columns - 1,\n      _minRow = minRow ? minRow : 0,\n      _maxRow = maxRow ? maxRow - 1 : rows - 1,\n      filteredVectors = uniqWith(\n        vectors.filter(\n          vector => !(vector.x === vector.y && vector.x === 0)\n        ),\n        isEqual\n      ),\n      yieldedCells = [{ ...cell }],\n      getNext = () => {\n        const nextCells: IGridCell[] = []\n\n        filteredVectors.forEach(vector => {\n          previousCells.forEach(({ column, row }) => {\n            if (\n              (vector.x === -1 && column <= cell.column) ||\n              (vector.x === 1 && column >= cell.column) ||\n              (vector.y === -1 && row <= cell.row) ||\n              (vector.y === 1 && row >= cell.row)\n            ) {\n              const cell = {\n                column: column + vector.x,\n                row: row + vector.y,\n              }\n\n              if (yieldedCells.find(({ column, row }) => column === cell.column && row === cell.row)) return\n\n              yieldedCells.push(cell)\n              nextCells.push(cell)\n            }\n          })\n        })\n\n        const filtered = uniqWith(\n          nextCells.filter(\n            ({ column, row }) =>\n              (column >= _minColumn && row >= _minRow && column <= _maxColumn && row <= _maxRow)\n          ),\n          isEqual\n        )\n\n        if (!filtered.length) return null\n\n        return filtered\n      }\n\n    yield [{ ...cell }]\n\n    while (true) {\n      const nextCells = getNext()\n\n      if (!nextCells) break\n\n      yield nextCells\n\n      previousCells = nextCells\n    }\n  }\n})\n\nexport const runGridScenario = async (\n  scenario: AsyncIterable<IGridCell[]>,\n  stepDelay: number,\n  process: (data: IGridCell[]) => true | void\n) => {\n  for await (const data of scenario) {\n    const result = process(data)\n\n    if (result) break\n\n    if (stepDelay > 0) {\n      await delay(stepDelay)\n    }\n  }\n}\n\nexport const getFilledMatrix = <T>({ columns, rows, value }: IGridParams & { value: T }): T[][] => {\n  const result: T[][] = []\n\n  for (let row = 0; row < rows; row++) {\n    result.push([])\n    for (let column = 0; column < columns; column++) {\n      result[row].push(value)\n    }\n  }\n\n  return result\n}\n","export const getOrderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const getRandomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n\nexport const getRandomArrayItem = <T>(array: T[]): T => array[getRandomInteger(array.length - 1)]\n","import { getRandomArrayItem } from './misc'\nimport { emojiIndex } from 'emoji-mart'\n\nexport const searchRandomEmoji = (() => {\n  const\n    cache = new Map(),\n    getSearchResults = (searchString: string): string[] => {\n      const fromCache = cache.get(searchString)\n\n      if (fromCache) {\n        return fromCache\n      }\n\n      // @ts-ignore\n      const searchResults = emojiIndex.search(searchString).map((item) => item.native)\n\n      console.log(searchString, searchResults)\n\n      cache.set(searchString, searchResults)\n\n      return searchResults\n    }\n\n  return (searchStrings: string[]): string => {\n    return getRandomArrayItem(searchStrings.map(getSearchResults).flat())\n  }\n})()\n","export default function <T extends Function>(\n  target: object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n): TypedPropertyDescriptor<T> | void {\n  return {\n    configurable: true,\n    get(this: T): T {\n      const value = descriptor.value!.bind(this)\n\n      Object.defineProperty(this, propertyKey, {\n        value,\n        configurable: true,\n        writable: true,\n      })\n      return value\n    },\n  }\n}\n","import React from 'react'\nimport makeGrid, { GridService } from '../services/GridService' // 6.x or mobx-react-lite@1.4.0\nimport { useLocalStore } from 'mobx-react'\n\nconst gridContext = React.createContext<GridService | null>(null)\n\nexport const GridProvider: React.FC = ({ children }) => {\n  const store = useLocalStore(makeGrid)\n  return <gridContext.Provider value={store}>{children}</gridContext.Provider>\n}\n\nexport const useGrid = () => {\n  const store = React.useContext(gridContext)\n\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useGrid must be used within a GridProvider.')\n  }\n\n  return store\n}\n","import React from 'react'\nimport styles from './Cell.module.scss'\nimport { observer } from 'mobx-react'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport classNames from 'classnames'\n\nconst CellFactory = observer(({ id }: { id: string }) => {\n  const\n    { getCell } = useGrid(),\n    cell = getCell(id)\n\n  const\n    { content, isHello, isEmoji, isText } = cell.attributes\n\n  let child\n\n  if (isEmoji) {\n    if (isHello) {\n      child = <Emoji content={content!} className={styles.isHello}/>\n    } else {\n      child = <Emoji content={content!}/>\n    }\n  } else if (isText) {\n    child = <Text content={content!}/>\n  }\n\n  return (\n    <div className={styles.cell}>\n      {child}\n    </div>\n  )\n})\n\ninterface IClassNameProps {\n  className?: string\n}\n\nconst Emoji: React.FC<ICellEmojiAttributes & IClassNameProps> = ({ content, className }) => (\n  <div className={classNames(styles.cellEmoji, className)}>\n    {content}\n  </div>\n)\n\nconst Text: React.FC<ICellTextAttributes> = ({ content }) => (\n  <div className={styles.cellText}>\n    {content}\n  </div>\n)\n\nexport default CellFactory\n","import React from 'react'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport Cell from '../Cell'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport { observer } from 'mobx-react'\n\nconst Grid = observer(() => {\n  const { grid } = useGrid()\n\n  return (\n    <div className={styles.grid}>\n      {\n        grid.map((columns, row) => (\n          <Row key={row}>\n            {\n              columns.map((id, column) => (\n                <Col key={column}>\n                  <Cell id={id}/>\n                </Col>\n              ))\n            }\n          </Row>\n        ))\n      }\n    </div>\n  )\n})\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst Col: React.FC = ({ children }) => {\n  return (\n    <div\n      className={\n        classNames(styles.col)\n      }\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Grid\n","import React from 'react'\nimport Grid from './components/Grid'\nimport withGridContext from './hoc/withGridContext'\n\nconst GridWithContext = withGridContext(Grid)\n\nconst App: React.FC = () => {\n  return (\n    <GridWithContext/>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { GridProvider } from '../contextProviders/GridProvider'\n\ninterface IHocProps {\n}\n\nconst withGridContext = <P extends object>(Component: React.ComponentType<P>) => {\n  const\n    HocComponent: React.FC<P & IHocProps> = ({ ...props }) => {\n      return (\n        <GridProvider>\n          <Component {...props as P} />\n        </GridProvider>\n      )\n    }\n\n  return HocComponent\n}\n\nexport default withGridContext\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"maxCellSize\":\"100px\",\"grid\":\"Grid_grid__24j1p\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"helloAnimationTime\":\"1200\",\"cell\":\"Cell_cell__2Y63x\",\"cellEmoji\":\"Cell_cellEmoji__210BA\",\"isHello\":\"Cell_isHello__3Leu3\",\"hello-animation\":\"Cell_hello-animation__zIPad\"};"],"sourceRoot":""}