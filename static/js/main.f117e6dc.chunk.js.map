{"version":3,"sources":["components/Flipper/Cell.module.scss","services/GridService.ts","constants.ts","helpers/scenario.ts","helpers/grid.ts","helpers/misc.ts","helpers/emoji.ts","decorators/bind.ts","contextProviders/GridProvider.tsx","components/Flipper/Cell.tsx","components/Grid/Grid.tsx","App.tsx","hoc/withGridContext.tsx","serviceWorker.ts","index.tsx","components/Grid/Grid.module.scss"],"names":["module","exports","EViews","maxCellSize","gridStyle","minCellSize","MAX_CELL_SIZE","parseInt","MIN_CELL_SIZE","delay","ms","Promise","resolve","setTimeout","getViewportSize","window","viewportHeight","innerHeight","viewportWidth","innerWidth","getMobileMinColumnsAndRows","isPortrait","isPortraitMode","minColumns","minRows","getMinAndMaxCellSize","getMinGridSize","isMobile","calculateGridSize","gridItemSize","Math","min","columns","max","round","rows","makeSpiralScenario","Symbol","asyncIterator","a","column","row","minColumn","minRow","maxColumn","maxRow","vector","x","y","getVectorX","getVectorY","getNext","nextX","nextY","next","makeFromCellScenario","cell","vectors","previousCells","filteredVectors","uniqWith","filter","isEqual","yieldedCells","nextCells","forEach","find","push","filtered","length","runGridScenario","scenario","stepDelay","process","async","getRandomArrayItem","array","rand","random","getRandomInteger","searchRandomEmoji","cache","Map","getSearchResults","searchString","fromCache","get","searchResults","emojiIndex","search","map","item","native","set","searchStrings","flat","GridService","observable","struct","initialAnimationWasShown","isAnimationRun","initWasRequested","this","init","addEventListener","debounce","viewportSize","reaction","result","cells","clear","cellId","content","grid","initGrid","showInitialAnimation","DELAY","square","midCol","floor","midRow","midCellId","midCell","getCell","startAnimation","data","id","stopAnimation","isHello","initial","action","computed","target","propertyKey","descriptor","configurable","value","bind","Object","defineProperty","writable","makeGrid","gridContext","React","createContext","GridProvider","children","store","useLocalStore","Provider","useGrid","useContext","Error","Cell","styles","observer","className","classNames","isText","Grid","key","Row","Col","col","GridWithContext","Component","props","withGridContext","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f117e6dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2Y_Ns\",\"isHello\":\"Cell_isHello__1FhX8\",\"hello-animation\":\"Cell_hello-animation__304hW\",\"withoutAnimation\":\"Cell_withoutAnimation__3ExHM\",\"cellSide\":\"Cell_cellSide__3ke7A\"};","import { action, computed, observable, reaction } from 'mobx'\nimport {\n  calculateGridSize,\n  getViewportSize,\n  I2DVector,\n  makeFromCellScenario,\n  makeSpiralScenario,\n  runGridScenario\n} from '../helpers/grid'\nimport { debounce } from 'lodash'\nimport { searchRandomEmoji } from '../helpers/emoji'\nimport { delay } from '../helpers/scenario'\nimport bind from '../decorators/bind'\n\nexport enum EViews { initial, application, snake }\n\nexport type TFlipperContent = string | null\n\nexport interface ICell {\n  content?: TFlipperContent\n  isHello?: boolean\n}\n\nexport class GridService {\n  @observable\n  columns: number = 0\n\n  @observable\n  rows: number = 0\n\n  @observable.struct viewportSize = getViewportSize()\n\n  @observable\n  private view: EViews = EViews.initial\n\n  @observable\n  grid: string[][] = []\n\n  @observable\n  private cells = new Map<string, ICell>()\n\n  @action\n  private initGrid() {\n    let result: string[][] = []\n\n    this.cells.clear()\n\n    for (let row = 0; row < this.rows; row++) {\n      result.push([])\n\n      for (let column = 0; column < this.columns; column++) {\n        const cellId = `${row}-${column}`\n\n        result[row].push(cellId)\n\n        this.cells.set(cellId, {\n          content: null\n        })\n      }\n    }\n\n    this.grid = result\n  }\n\n  @action\n  private async init() {\n    if (this.isAnimationRun) {\n      this.initWasRequested = true\n      return\n    }\n\n    const { columns, rows } = calculateGridSize(this.viewportSize)\n\n    this.columns = columns\n    this.rows = rows\n\n    this.initGrid()\n\n    if (!this.initialAnimationWasShown) {\n      this.showInitialAnimation()\n    }\n  }\n\n  private initialAnimationWasShown = false\n\n  private isAnimationRun = false\n  private initWasRequested = false\n\n  @action\n  private startAnimation() {\n    this.isAnimationRun = true\n  }\n\n  @action\n  private stopAnimation() {\n    this.isAnimationRun = false\n\n    if (this.initWasRequested) {\n      this.init()\n    }\n\n    this.initWasRequested = false\n  }\n\n  @action\n  async showInitialAnimation() {\n    const\n      DELAY = 4000 / this.square,\n      { columns, rows, grid } = this,\n      midCol = Math.floor(columns / 2),\n      midRow = Math.floor(rows / 2),\n      midCellId = grid[midRow][midCol],\n      midCell = this.getCell(midCellId),\n      midCellSymbol = '✋'\n\n    this.startAnimation()\n\n    {\n      const\n        scenarioConfig = { columns, rows },\n        scenario = makeSpiralScenario(scenarioConfig)\n\n      await runGridScenario(scenario, DELAY / 2, (data) => {\n        data.forEach(({ column, row }) => {\n          const\n            id = grid[row][column],\n            cell = this.getCell(id)\n\n          if (midCellId === id) {\n            cell.content = midCellSymbol\n          } else {\n            cell.content = searchRandomEmoji(['snow', 'happy', 'santa', 'gift', 'family'])\n          }\n        })\n      })\n    }\n\n    this.initialAnimationWasShown = true\n\n    await delay(300)\n\n    {\n      const clear = async (vectors: I2DVector[]) => {\n        const\n          scenarioConfig = {\n            columns, rows,\n            cell: {\n              column: midCol,\n              row: midRow,\n            },\n            vectors\n          },\n          scenario = makeFromCellScenario(scenarioConfig)\n\n        await runGridScenario(scenario, DELAY, (data) => {\n          data.forEach(({ column, row }) => {\n            const\n              id = grid[row][column],\n              cell = this.getCell(id)\n\n            if (midCellId !== id) {\n              cell.content = ''\n            }\n          })\n        })\n      }\n\n      await clear([\n        { x: 1, y: 1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n      ])\n\n      await clear([\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 1 },\n        { x: 0, y: 1 },\n      ])\n    }\n\n    this.stopAnimation()\n\n    midCell.isHello = true\n\n    await delay(1400)\n\n    midCell.isHello = false\n\n    this.showInitialAnimation()\n  }\n\n  @computed\n  get square() {\n    return this.columns * this.rows\n  }\n\n  @bind\n  getCell(id: string) {\n    return this.cells.get(id)!\n  }\n\n  constructor() {\n    this.init()\n\n    window.addEventListener('resize', debounce(() => {\n      this.viewportSize = getViewportSize()\n    }, 500))\n\n    reaction(() => {\n      return this.viewportSize\n    }, () => {\n      this.init()\n    })\n  }\n}\n\nconst makeGrid = () => {\n  return new GridService()\n}\n\nexport default makeGrid\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { maxCellSize, minCellSize } = gridStyle\n\nexport const\n  MAX_CELL_SIZE = parseInt(maxCellSize),\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","export type TScenarioValue = any | Function\nexport type TScenario = { delay?: number, value: TScenarioValue }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield typeof value === 'function' ? value() : value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => boolean) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    const breakScenario = process(item)\n    if (breakScenario) break\n  }\n}\n","import { isEqual, uniqWith } from 'lodash'\nimport { MAX_CELL_SIZE, MIN_CELL_SIZE } from '../constants'\nimport { delay } from './scenario'\n\nexport interface IGridParams {\n  columns: number\n  rows: number\n}\n\nexport interface IViewportSize {\n  viewportWidth: number\n  viewportHeight: number\n}\n\nexport const getViewportSize = (): IViewportSize => {\n  const { innerHeight: viewportHeight, innerWidth: viewportWidth } = window\n\n  return {\n    viewportWidth,\n    viewportHeight,\n  }\n}\n\nconst isPortraitMode = (): boolean => {\n  const { viewportWidth, viewportHeight } = getViewportSize()\n\n  return viewportWidth > viewportHeight\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 12,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => {\n  const isPortrait = isPortraitMode()\n\n\n  return {\n    minColumns: isPortrait ? 8 : 7,\n    minRows: isPortrait ? 7 : 8,\n  }\n}\n\nconst getMinAndMaxCellSize = () => ({\n  MIN_CELL_SIZE,\n  MAX_CELL_SIZE\n})\n\nexport const isMobile = () => {\n  const\n    { MIN_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getDesktopMinColumnsAndRows(),\n    { viewportHeight, viewportWidth } = getViewportSize()\n\n  return viewportWidth <= MIN_CELL_SIZE * minColumns || viewportHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getMinGridSize = () => (\n  isMobile() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nexport const calculateGridSize = ({ viewportWidth, viewportHeight }: IViewportSize): IGridParams => {\n  const\n    { MIN_CELL_SIZE, MAX_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(viewportHeight / minRows, viewportWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n  if (gridItemSize > MAX_CELL_SIZE) gridItemSize = MAX_CELL_SIZE\n\n  const\n    columns = Math.min(Math.max(Math.round(viewportWidth / gridItemSize), minColumns), 45),\n    rows = Math.min(Math.max(Math.round(viewportHeight / gridItemSize), minRows), 30)\n\n  return {\n    columns,\n    rows,\n  }\n}\n\n\n/**\n 1 2 3\n 8 x 4\n 7 6 5\n */\n\nexport const getFlipDirectionKey = ({ x, y }: I2DVector): number => {\n  if (x === 1) {\n    if (y === 0) {\n      return 4\n    } else if (y === 1) {\n      return 5\n    } else {\n      return 3\n    }\n  } else if (x === 0) {\n    if (y === 1) {\n      return 6\n    } else if (y === 0) {\n      return 4\n    } else {\n      return 2\n    }\n  } else {\n    if (y === 0) {\n      return 8\n    } else if (y === 1) {\n      return 7\n    } else {\n      return 1\n    }\n  }\n}\n\nexport interface I2DVector {\n  x: number\n  y: number\n}\n\nexport interface IGridCell {\n  column: number\n  row: number\n}\n\nexport const makeSpiralScenario = ({ columns, rows }: IGridParams) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      column = -1,\n      row = 0,\n      minColumn = 0,\n      minRow = 0,\n      maxColumn = columns,\n      maxRow = rows,\n      vector: I2DVector = {\n        x: 1,\n        y: 0\n      }\n\n    const\n      getVectorX = () => vector.x,\n      getVectorY = () => vector.y,\n      getNext = (): { nextX: number, nextY: number } | null => {\n        const\n          nextX = column + getVectorX(),\n          nextY = row + getVectorY()\n\n        if (getVectorY() === 0) {\n          if (minColumn === maxColumn) return null\n\n          if (nextX >= maxColumn) {\n            vector = {\n              x: 0,\n              y: 1,\n            }\n            minRow++\n            return getNext()\n          }\n\n          if (nextX < minColumn) {\n            vector = {\n              x: 0,\n              y: -1,\n            }\n            maxRow--\n            return getNext()\n          }\n        }\n\n        if (getVectorX() === 0) {\n          if (minRow === maxRow) return null\n\n          if (nextY >= maxRow) {\n            vector = {\n              x: -1,\n              y: 0,\n            }\n            maxColumn--\n            return getNext()\n          }\n\n          if (nextY < minRow) {\n            vector = {\n              x: 1,\n              y: 0,\n            }\n            minColumn++\n            return getNext()\n          }\n        }\n\n        return { nextX, nextY }\n      }\n\n    while (true) {\n      const next = getNext()\n\n      if (!next) break\n\n      const { nextX, nextY } = next\n\n      column = nextX\n      row = nextY\n\n      yield [{ column, row }]\n    }\n  }\n})\n\nexport type TFromCellScenarioArguments = IGridParams & { cell: IGridCell } & { vectors: I2DVector[] }\n\nexport const makeFromCellScenario = (\n  { columns, rows, cell, vectors }: TFromCellScenarioArguments\n) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      previousCells = [cell]\n\n    const\n      minColumn = 0,\n      maxColumn = columns - 1,\n      minRow = 0,\n      maxRow = rows - 1,\n      filteredVectors = uniqWith(\n        vectors.filter(\n          vector => !(vector.x === vector.y && vector.x === 0)\n        ),\n        isEqual\n      ),\n      yieldedCells = [{ ...cell }],\n      getNext = () => {\n        const nextCells: IGridCell[] = []\n\n        filteredVectors.forEach(vector => {\n          previousCells.forEach(({ column, row }) => {\n            if (\n              (vector.x === -1 && column <= cell.column) ||\n              (vector.x === 1 && column >= cell.column) ||\n              (vector.y === -1 && row <= cell.row) ||\n              (vector.y === 1 && row >= cell.row)\n            ) {\n              const cell = {\n                column: column + vector.x,\n                row: row + vector.y,\n              }\n\n              if (yieldedCells.find(({ column, row }) => column === cell.column && row === cell.row)) return\n\n              yieldedCells.push(cell)\n              nextCells.push(cell)\n            }\n          })\n        })\n\n        const filtered = uniqWith(\n          nextCells.filter(\n            ({ column, row }) =>\n              (column >= minColumn && row >= minRow && column <= maxColumn && row <= maxRow)\n          ),\n          isEqual\n        )\n\n        if (!filtered.length) return null\n\n        return filtered\n      }\n\n    yield [{ ...cell }]\n\n    while (true) {\n      const nextCells = getNext()\n\n      if (!nextCells) break\n\n      yield nextCells\n\n      previousCells = nextCells\n    }\n  }\n})\n\nexport const runGridScenario = async (\n  scenario: AsyncIterable<IGridCell[]>,\n  stepDelay: number,\n  process: (data: IGridCell[]) => void\n) => {\n  for await (const data of scenario) {\n    process(data)\n\n    if (stepDelay > 0) {\n      await delay(stepDelay)\n    }\n  }\n}\n\nexport const getFilledMatrix = <T>({ columns, rows, value }: IGridParams & { value: T }): T[][] => {\n  const result: T[][] = []\n\n  for (let row = 0; row < rows; row++) {\n    result.push([])\n    for (let column = 0; column < columns; column++) {\n      result[row].push(value)\n    }\n  }\n\n  return result\n}\n","export const getOrderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const getRandomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n\nexport const getRandomArrayItem = <T>(array: T[]): T => array[getRandomInteger(array.length - 1)]\n","import { getRandomArrayItem } from './misc'\nimport { emojiIndex } from 'emoji-mart'\n\nexport const searchRandomEmoji = (() => {\n  const\n    cache = new Map(),\n    getSearchResults = (searchString: string): string[] => {\n      const fromCache = cache.get(searchString)\n\n      if (fromCache) {\n        return fromCache\n      }\n\n      // @ts-ignore\n      const searchResults = emojiIndex.search(searchString).map((item) => item.native)\n\n      cache.set(searchString, searchResults)\n\n      return searchResults\n    }\n\n  return (searchStrings: string[]): string => {\n    return getRandomArrayItem(searchStrings.map(getSearchResults).flat())\n  }\n})()\n","export default function <T extends Function>(\n  target: object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n): TypedPropertyDescriptor<T> | void {\n  return {\n    configurable: true,\n    get(this: T): T {\n      const value = descriptor.value!.bind(this)\n\n      Object.defineProperty(this, propertyKey, {\n        value,\n        configurable: true,\n        writable: true,\n      })\n      return value\n    },\n  }\n}\n","import React from 'react'\nimport makeGrid, { GridService } from '../services/GridService' // 6.x or mobx-react-lite@1.4.0\nimport { useLocalStore } from 'mobx-react'\n\nconst gridContext = React.createContext<GridService | null>(null)\n\nexport const GridProvider: React.FC = ({ children }) => {\n  const store = useLocalStore(makeGrid)\n  return <gridContext.Provider value={store}>{children}</gridContext.Provider>\n}\n\nexport const useGrid = () => {\n  const store = React.useContext(gridContext)\n\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useGrid must be used within a GridProvider.')\n  }\n\n  return store\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './Cell.module.scss'\nimport { observer } from 'mobx-react'\nimport { useGrid } from '../../contextProviders/GridProvider'\n\nexport const HELLO_CLASS_NAME = styles.isHello\n\nconst Cell = observer(({ id }: { id: string }) => {\n  const\n    { getCell } = useGrid(),\n    cell = getCell(id)\n\n  if (!cell) return null\n\n  const\n    { content, isHello } = cell,\n    className = classNames(\n      styles.cell,\n      styles.isText,\n      isHello && styles.isHello\n    )\n\n  return (\n    <div className={className}>\n      {content}\n    </div>\n  )\n})\n\nexport default Cell\n","import React from 'react'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport Cell from '../Flipper'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport { observer } from 'mobx-react'\n\nconst Grid = observer(() => {\n  const { grid } = useGrid()\n\n  return (\n    <div className={styles.grid}>\n      {\n        grid.map((columns, row) => (\n          <Row key={row}>\n            {\n              columns.map((id, column) => (\n                <Col key={column}>\n                  <Cell id={id}/>\n                </Col>\n              ))\n            }\n          </Row>\n        ))\n      }\n    </div>\n  )\n})\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst Col: React.FC = ({ children }) => {\n  return (\n    <div\n      className={\n        classNames(styles.col)\n      }\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Grid\n","import React from 'react'\nimport Grid from './components/Grid'\nimport withGridContext from './hoc/withGridContext'\n\nconst GridWithContext = withGridContext(Grid)\n\nconst App: React.FC = () => {\n  return (\n    <GridWithContext/>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { GridProvider } from '../contextProviders/GridProvider'\n\ninterface IHocProps {\n}\n\nconst withGridContext = <P extends object>(Component: React.ComponentType<P>) => {\n  const\n    HocComponent: React.FC<P & IHocProps> = ({ ...props }) => {\n      return (\n        <GridProvider>\n          <Component {...props as P} />\n        </GridProvider>\n      )\n    }\n\n  return HocComponent\n}\n\nexport default withGridContext\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"maxCellSize\":\"100px\",\"grid\":\"Grid_grid__24j1p\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\"};"],"sourceRoot":""}