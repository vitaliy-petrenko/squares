{"version":3,"sources":["components/Grid/Grid.module.scss","components/Flipper/Flipper.module.scss","helpers/misc.ts","components/Flipper/Flipper.tsx","components/Grid/Grid.tsx","constants.ts","helpers/grid.ts","helpers/scenario.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","orderedArray","count","Array","from","keys","randomInteger","max","min","rand","Math","random","round","emojiArray","getRandomEmoji","length","Flipper","props","flip","setState","prevState","state","flipDirection","toString","emojis","setInterval","this","className","classNames","styles","flipper","isFlipped","onClick","flipperIn","flipperSide","React","Component","Row","children","row","getRandomFloatingClass","Col","useState","isEmpty","floatingClass","useMemo","col","colIn","Grid","columns","rows","rowsArray","columnsArray","grid","gridIn","map","key","column","maxCellSize","gridStyle","minCellSize","MAX_CELL_SIZE","parseInt","MIN_CELL_SIZE","getMinAndMaxCellSize","getMinGridSize","minColumns","minRows","window","innerWidth","innerHeight","isMobile","calculateGridSize","windowHeight","windowWidth","getWindowSize","gridItemSize","delay","ms","Promise","resolve","reject","setTimeout","makeScenario","scenarios","Symbol","asyncIterator","a","i","sceneDelay","value","calculateGrid","App","setGrid","reCalc","useEffect","addEventListener","removeEventListener","scenes","process","async","scenario","runScenario","console","log","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.998fb85d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"maxCellSize\":\"100px\",\"grid\":\"Grid_grid__24j1p\",\"gridIn\":\"Grid_gridIn__2Raaz\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\",\"isFloating1\":\"Grid_isFloating1__20oI4\",\"floating-1\":\"Grid_floating-1__1dRll\",\"isFloating2\":\"Grid_isFloating2__1eMuV\",\"floating-2\":\"Grid_floating-2__25ATD\",\"isFloating3\":\"Grid_isFloating3__1prHf\",\"floating-3\":\"Grid_floating-3__1cUcQ\",\"isFloating4\":\"Grid_isFloating4__Ck5IM\",\"floating-4\":\"Grid_floating-4__1OzQw\",\"isFloating5\":\"Grid_isFloating5__3C1TG\",\"floating-5\":\"Grid_floating-5__3QYP9\",\"isFloating6\":\"Grid_isFloating6__JcZcL\",\"floating-6\":\"Grid_floating-6__2keIC\",\"isFloating7\":\"Grid_isFloating7__1EbOc\",\"floating-7\":\"Grid_floating-7__1hJ9u\",\"isFloating8\":\"Grid_isFloating8__3ccTU\",\"floating-8\":\"Grid_floating-8__2tMjq\",\"isFloating9\":\"Grid_isFloating9__3JlyO\",\"floating-9\":\"Grid_floating-9__1-RLT\",\"isFloating10\":\"Grid_isFloating10__32WJ3\",\"floating-10\":\"Grid_floating-10__5rQpD\",\"colIn\":\"Grid_colIn__1AHxM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flipper\":\"Flipper_flipper__14-7N\",\"isIcon\":\"Flipper_isIcon__3scFd\",\"isImage\":\"Flipper_isImage__1dr-L\",\"flipperIn\":\"Flipper_flipperIn__ydsnX\",\"flipperSide\":\"Flipper_flipperSide__3bjKX\",\"isFlipped\":\"Flipper_isFlipped__2fwGj\",\"flipDirection1\":\"Flipper_flipDirection1__2CX0R\",\"flipDirection5\":\"Flipper_flipDirection5__3erTy\",\"flipDirection2\":\"Flipper_flipDirection2__23wn4\",\"flipDirection6\":\"Flipper_flipDirection6__36758\",\"flipDirection3\":\"Flipper_flipDirection3__QaEeh\",\"flipDirection7\":\"Flipper_flipDirection7__2SYue\",\"flipDirection4\":\"Flipper_flipDirection4__14e5g\",\"flipDirection8\":\"Flipper_flipDirection8__8I0LX\"};","export const orderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const randomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './Flipper.module.scss'\nimport { randomInteger } from '../../helpers/misc'\n\nconst emojiArray = ['🗼',\n  '🗽',\n  '🗾',\n  '🗿',\n  '😀',\n  '😁',\n  '😂',\n  '😃',\n  '😄',\n  '😅',\n  '😆',\n  '😇',\n  '😈',\n  '😉',\n  '😊',\n  '😋',\n  '😌',\n  '😍',\n  '😎',\n  '😏',\n  '😐',\n  '😑',\n  '😒',\n  '😓',\n  '😔',\n  '😕',\n  '😖',\n  '😗',\n  '😘',\n  '😙',\n  '😚',\n  '😛',\n  '😜',\n  '😝',\n  '😞',\n  '😟',\n  '😠',\n  '😡',\n  '😢',\n  '😣',\n  '😤',\n  '😥',\n  '😦',\n  '😧',\n  '😨',\n  '😩',\n  '😪',\n  '😫',\n  '😬',\n  '😭',\n  '😮',\n  '😯',\n  '😰',\n  '😱',\n  '😲',\n  '😳',\n  '😴',\n  '😵',\n  '😶',\n  '😷',\n  '😸',\n  '😹',\n  '😺',\n  '😻',\n  '😼',\n  '😽',\n  '😾',\n  '😿',\n  '🙀',\n  '🙁',\n  '🙂',\n  '🙃',\n  '🙄',\n  '🙅🏻‍♀️',\n  '🙅🏻‍♂️',\n  '🙅🏻',\n  '🙅🏼‍♀️',\n  '🙅🏼‍♂️',\n  '🙅🏼',\n  '🙅🏽‍♀️',\n  '🙅🏽‍♂️',\n  '🙅🏽',\n  '🙅🏾‍♀️',\n  '🙅🏾‍♂️',\n  '🙅🏾',\n  '🙅🏿‍♀️',\n  '🙅🏿‍♂️',\n  '🙅🏿',\n  '🙅‍♀️',\n  '🙅‍♂️',\n  '🙅',\n  '🙆🏻‍♀️',\n  '🙆🏻‍♂️',\n  '🙆🏻',\n  '🙆🏼‍♀️',\n  '🙆🏼‍♂️',\n  '🙆🏼',\n  '🙆🏽‍♀️',\n  '🙆🏽‍♂️',\n  '🙆🏽',\n  '🙆🏾‍♀️',\n  '🙆🏾‍♂️',\n  '🙆🏾',\n  '🙆🏿‍♀️',\n  '🙆🏿‍♂️',\n  '🙆🏿',\n  '🙆‍♀️',\n  '🙆‍♂️',\n  '🙆',\n  '🙇🏻‍♀️',\n  '🙇🏻‍♂️',\n  '🙇🏻',\n  '🙇🏼‍♀️',\n  '🙇🏼‍♂️',\n  '🙇🏼',\n  '🙇🏽‍♀️',\n  '🙇🏽‍♂️',\n  '🙇🏽',\n  '🙇🏾‍♀️',\n  '🙇🏾‍♂️',\n  '🙇🏾',\n  '🙇🏿‍♀️',]\n\ninterface IProps {\n\n}\n\ninterface IState {\n  flip: boolean\n  flipDirection: string\n  emojis: string[]\n}\n\nconst getRandomEmoji = (): string => emojiArray[randomInteger(emojiArray.length - 1)]\n\nexport default class Flipper extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {\n      flip: false,\n      flipDirection: randomInteger(8, 1).toString(),\n      emojis: [getRandomEmoji(), getRandomEmoji()]\n    }\n\n    setInterval(this.flip, 400 * randomInteger(100, 1))\n  }\n\n  flip = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      flip: !prevState.flip\n    }))\n  }\n\n  render() {\n    const { flip, flipDirection, emojis } = this.state\n\n    return (\n      <div className={classNames(styles.flipper, styles[`flipDirection${flipDirection}`], flip && styles.isFlipped)}\n           onClick={this.flip}>\n        <div className={styles.flipperIn}>\n          <div className={styles.flipperSide}>\n            {emojis[0]}\n          </div>\n\n          <div className={styles.flipperSide}>\n            {emojis[1]}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { useMemo, useState } from 'react'\nimport { orderedArray } from '../../helpers/misc'\nimport Flipper from '../Flipper'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\n\ninterface IProps {\n  columns: number\n  rows: number\n}\n\nconst Grid: React.FC<IProps> = ({ columns, rows }) => {\n  const\n    rowsArray = orderedArray(rows),\n    columnsArray = orderedArray(columns)\n\n  return (\n    <div className={styles.grid}>\n      <div className={styles.gridIn}>\n        {\n          rowsArray.map(row => (\n            <Row key={row}>\n              {\n                columnsArray.map(column => (\n                  <Col key={column}>\n                    <Flipper/>\n                  </Col>\n                ))\n              }\n            </Row>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst getRandomFloatingClass = () => styles[`isFloating${Math.round(10 * Math.random())}`]\n\nconst Col: React.FC = ({ children }) => {\n  const\n    [isEmpty] = useState(true),\n    floatingClass = useMemo(getRandomFloatingClass, [isEmpty])\n\n  return (\n    <div\n      className={\n        classNames(styles.col, isEmpty && floatingClass)\n      }\n    >\n      <div className={styles.colIn}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Grid\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { maxCellSize, minCellSize } = gridStyle\n\nexport const\n  MAX_CELL_SIZE = parseInt(maxCellSize),\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","import { MAX_CELL_SIZE, MIN_CELL_SIZE } from '../constants'\n\nexport interface IGridParams {\n  columns: number\n  rows: number\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 11,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => ({\n  minColumns: 7,\n  minRows: 7,\n})\n\nconst getMinAndMaxCellSize = () => ({\n  MIN_CELL_SIZE,\n  MAX_CELL_SIZE\n})\n\nexport const isMobile = () => {\n  const\n    { MIN_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getDesktopMinColumnsAndRows()\n\n  return window.innerWidth <= MIN_CELL_SIZE * minColumns || window.innerHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getMinGridSize = () => (\n  isMobile() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nconst getWindowSize = () => {\n  const { innerHeight: windowHeight, innerWidth: windowWidth } = window\n\n  return {\n    windowWidth,\n    windowHeight,\n  }\n}\n\nexport const calculateGridSize = (): IGridParams => {\n  const\n    { windowWidth, windowHeight } = getWindowSize(),\n    { MIN_CELL_SIZE, MAX_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(windowHeight / minRows, windowWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n  if (gridItemSize > MAX_CELL_SIZE) gridItemSize = MAX_CELL_SIZE\n\n  const\n    columns = Math.min(Math.max(Math.round(windowWidth / gridItemSize), minColumns), 45),\n    rows = Math.min(Math.max(Math.round(windowHeight / gridItemSize), minRows), 30)\n\n  return {\n    columns,\n    rows,\n  }\n}\n","export type TScenario = { delay?: number, value: any }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve, reject) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => any) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    process(item)\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport Grid from './components/Grid'\nimport { calculateGridSize } from './helpers/grid'\nimport { runScenario } from './helpers/scenario'\n\nconst calculateGrid = () => calculateGridSize()\n\nconst App: React.FC = ({ children }) => {\n  const\n    [grid, setGrid] = useState(calculateGrid()),\n    reCalc = () => setGrid(calculateGrid())\n\n  useEffect(() => {\n    window.addEventListener('resize', reCalc)\n\n    return () => window.removeEventListener('resize', reCalc)\n  })\n\n  return (\n    <Grid columns={grid.columns} rows={grid.rows}/>\n  )\n}\n\nexport default App\n\nrunScenario([\n  { delay: 0, value: 10 },\n  { delay: 1000, value: 10 },\n  { delay: 1000, value: 'aDS' },\n  { delay: 1000, value: 10 },\n  { delay: 1000, value: 10 },\n], console.log)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}