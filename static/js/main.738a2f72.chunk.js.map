{"version":3,"sources":["constants.ts","helpers/grid.ts","helpers/misc.ts","helpers/emoji.ts","decorators/bind.ts","models/cell.ts","services/GridService.ts","contextProviders/GridProvider.tsx","components/Cell/Cell.tsx","hoc/withContainerClass.tsx","components/Grid/Grid.tsx","App.tsx","hoc/withGridContext.tsx","serviceWorker.ts","index.tsx","components/Cell/Cell.module.scss","components/Grid/Grid.module.scss"],"names":["minCellSize","gridStyle","MIN_CELL_SIZE","parseInt","delay","ms","Promise","resolve","setTimeout","getViewportSize","window","viewportHeight","innerHeight","viewportWidth","innerWidth","isPortraitMode","isMobileMode","getDesktopMinColumnsAndRows","minColumns","minRows","calculateGridSize","gridItemSize","Math","min","columns","round","rows","makeSpiralScenario","Symbol","asyncIterator","a","column","row","minColumn","minRow","maxColumn","maxRow","vector","x","y","getVectorX","getVectorY","getNext","nextX","nextY","next","makeFromCellScenario","cell","vectors","previousCells","_minColumn","_maxColumn","_minRow","_maxRow","filteredVectors","uniqWith","filter","isEqual","yieldedCells","nextCells","forEach","find","push","filtered","length","runGridScenario","scenario","stepDelay","process","stopChecker","async","cells","getMatrixMidPoint","matrix","floor","getRandomArrayItem","array","max","rand","random","getRandomInteger","searchRandomEmoji","cache","Map","getSearchResults","searchString","fromCache","get","searchResults","emojiIndex","search","map","item","native","set","searchStrings","flat","target","propertyKey","descriptor","configurable","value","bind","this","Object","defineProperty","writable","EmptyModel","ColorModel","color","EmojiModel","content","HelloEmojiModel","symbol","EViews","TextModel","GridService","observable","struct","initialAnimationWasShown","isAnimationRun","initWasRequested","clearCell","model","showInitialAnimation","withAnimationDecorator","place404","addEventListener","debounce","viewportSize","reaction","init","isMobile","isPortrait","initGrid","isAnimationCanceled","delayAnimation","grid","STEP_DELAY","middleCell","midColumn","midRow","middleCellId","getCellData","iteration","id","runAnimationScenario","clear","beforeLastAnimationTimestamp","performance","now","helloAnimationTime","cellStyles","scenarioConfig","endDelay","c1","c2","c3","array404","columns404","getWithShift","result","cellId","method","startAnimation","args","apply","stopAnimation","getMenuPosition","initial","computed","action","makeGrid","gridContext","React","createContext","GridProvider","children","store","useLocalStore","Provider","useGrid","useContext","Error","CellComponentFactory","observer","component","Emoji","className","classNames","styles","cellEmoji","HelloEmoji","cellHelloEmoji","Text","cellText","Color","css","background","cellColor","style","withContainerClass","Component","selector","render","props","element","classList","add","remove","document","querySelector","Grid","key","Cell","Row","Col","col","gridWrapper","GridWithContext","withGridContext","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oXAEQA,EAAgBC,IAAhBD,YAGNE,EAAgBC,SAASH,GCFdI,EAAQ,SAACC,GACpB,OAAO,IAAIC,SAAQ,SAAUC,GAC3BC,WAAWD,EAASF,OAIXI,EAAkB,WAAsB,IAAD,EACiBC,OAA9CC,EAD6B,EAC1CC,YAER,MAAO,CACLC,cAJgD,EACbC,WAInCH,mBAISI,EAAiB,WAAgB,IAAD,EACDN,IAE1C,OAH2C,EACnCI,cADmC,EACpBF,gBAKZK,EAAe,WAAgB,IAAD,EAEbC,IAAxBC,EAFqC,EAErCA,WAAYC,EAFyB,EAEzBA,QAFyB,EAGHV,IAAlCE,EAHqC,EAGrCA,eAEJ,OALyC,EAGrBE,eAEIX,EAAgBgB,GAAcP,GAAkBT,EAAgBiB,GAG7EF,EAA8B,iBAAO,CAChDC,WAAY,GACZC,QAAS,KAcEC,EAAoB,SAAC,GAAmE,IAAjEP,EAAgE,EAAhEA,cAAeF,EAAiD,EAAjDA,eAAiD,EAHlGK,IAPO,CACLE,WAAY,EACZC,QAAS,GAKqCF,IAK5CC,EAF8F,EAE9FA,WAAYC,EAFkF,EAElFA,QAGdE,EAAeC,KAAKC,IAAIZ,EAAiBQ,EAASN,EAAgBK,GAEhEG,EAAenB,IAAemB,EAAenB,GAEjD,IACEsB,EAAUF,KAAKG,MAAMZ,EAAgBQ,GACrCK,EAAOJ,KAAKG,MAAMd,EAAiBU,GAkBrC,OAhBIG,GAAW,GACbA,EAAU,GACDA,GAAWN,EACpBM,EAAUN,EACCM,EAAU,GACrBA,IAGEE,GAAQ,GACVA,EAAO,GACEA,GAAQP,EACjBO,EAAOP,EACIO,EAAO,GAClBA,IAGK,CACLF,UACAE,SAISC,EAAqB,SAAC,GAAD,IAAGH,EAAH,EAAGA,QAASE,EAAZ,EAAYA,KAAZ,sBAC/BE,OAAOC,cADwB,sBACR,oDAAAC,EAAA,sDAEpBC,GAAU,EACVC,EAAM,EACNC,EAAY,EACZC,EAAS,EACTC,EAAYX,EACZY,EAASV,EACTW,EAA6B,CAC3BC,EAAG,EACHC,EAAG,GAILC,EAAa,kBAAMH,EAAOC,GAC1BG,EAAa,kBAAMJ,EAAOE,GAC1BG,EAAU,SAAVA,IACE,IACEC,EAAQZ,EAASS,IACjBI,EAAQZ,EAAMS,IAEhB,GAAqB,IAAjBA,IAAoB,CACtB,GAAIR,IAAcE,EAAW,OAAO,KAEpC,GAAIQ,GAASR,EAMX,OALAE,EAAS,CACPC,EAAG,EACHC,EAAG,GAELL,IACOQ,IAGT,GAAIC,EAAQV,EAMV,OALAI,EAAS,CACPC,EAAG,EACHC,GAAI,GAENH,IACOM,IAIX,GAAqB,IAAjBF,IAAoB,CACtB,GAAIN,IAAWE,EAAQ,OAAO,KAE9B,GAAIQ,GAASR,EAMX,OALAC,EAAS,CACPC,GAAI,EACJC,EAAG,GAELJ,IACOO,IAGT,GAAIE,EAAQV,EAMV,OALAG,EAAS,CACPC,EAAG,EACHC,EAAG,GAELN,IACOS,IAIX,MAAO,CAAEC,QAAOC,UAjEE,UAqEdC,EAAOH,IArEO,mDA8EpB,OALQC,EAAiBE,EAAjBF,MAAOC,EAAUC,EAAVD,MAEfb,EAASY,EACTX,EAAMY,EA5Ec,UA8Ed,CAAC,CAAEb,SAAQC,QA9EG,qEAmFbc,EAAuB,SAAC,GAAD,IAChCtB,EADgC,EAChCA,QAASE,EADuB,EACvBA,KAAMqB,EADiB,EACjBA,KAAMC,EADW,EACXA,QAASf,EADE,EACFA,UAAWC,EADT,EACSA,OAAQC,EADjB,EACiBA,UAAWC,EAD5B,EAC4BA,OAD5B,sBAGjCR,OAAOC,cAH0B,sBAGV,4CAAAC,EAAA,sDAqDtB,OAnDEmB,EAAgB,CAACF,GAGjBG,EAAajB,GAAwB,EACrCkB,EAAahB,EAAYA,EAAY,EAAIX,EAAU,EACnD4B,EAAUlB,GAAkB,EAC5BmB,EAAUjB,EAASA,EAAS,EAAIV,EAAO,EACvC4B,EAAkBC,mBAChBP,EAAQQ,QACN,SAAAnB,GAAM,QAAMA,EAAOC,IAAMD,EAAOE,GAAkB,IAAbF,EAAOC,MAE9CmB,WAEFC,EAAe,CAAC,eAAKX,IACrBL,EAAU,WACR,IAAMiB,EAAyB,GAE/BL,EAAgBM,SAAQ,SAAAvB,GACtBY,EAAcW,SAAQ,YAAsB,IAAnB7B,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAC/B,IACiB,IAAdK,EAAOC,GAAYP,GAAUgB,EAAKhB,QACrB,IAAbM,EAAOC,GAAWP,GAAUgB,EAAKhB,SACnB,IAAdM,EAAOE,GAAYP,GAAOe,EAAKf,KAClB,IAAbK,EAAOE,GAAWP,GAAOe,EAAKf,IAC/B,CACA,IAAMe,EAAO,CACXhB,OAAQA,EAASM,EAAOC,EACxBN,IAAKA,EAAMK,EAAOE,GAGpB,GAAImB,EAAaG,MAAK,gBAAG9B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,IAAX,OAAqBD,IAAWgB,EAAKhB,QAAUC,IAAQe,EAAKf,OAAM,OAExF0B,EAAaI,KAAKf,GAClBY,EAAUG,KAAKf,UAKrB,IAAMgB,EAAWR,mBACfI,EAAUH,QACR,gBAAGzB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,IAAX,OACGD,GAAUmB,GAAclB,GAAOoB,GAAWrB,GAAUoB,GAAcnB,GAAOqB,KAE9EI,WAGF,OAAKM,EAASC,OAEPD,EAFsB,MAhDX,SAqDhB,CAAC,eAAKhB,IArDU,UAwDdY,EAAYjB,IAxDE,mDA4DpB,OA5DoB,UA4DdiB,EA5Dc,QA8DpBV,EAAgBU,EA9DI,6DAmEbM,EAAkB,SAC7BC,EACAC,EACAC,EACAC,GAJ6B,2BAAAvC,EAAAwC,OAAA,oDAMzBD,IAAeA,IANU,kFAQHH,GARG,yBAAApC,EAAA,4DAAAA,EAAA,yDAQZyC,EARY,GAUvBF,IAAeA,IAVQ,yDAcZD,EAAQG,GAdI,0DAkBvBJ,EAAY,GAlBW,oCAAArC,EAAA,MAmBnB1B,EAAM+D,IAnBa,uLAAArC,EAAA,uMA4DlB0C,EAAoB,SAAIC,GAKnC,MAAO,CACLzC,IAJMV,KAAKoD,MAAMD,EAAOT,OAAS,GAKjCjC,OAJST,KAAKoD,MAAMD,EAAO,GAAGT,OAAS,KCrS9BW,EAAqB,SAAIC,GAAJ,OAAsBA,EALxB,SAACC,GAAkC,IAArBtD,EAAoB,uDAAN,EACtDuD,EAAOvD,EAAM,GAAMD,KAAKyD,UAAYF,EAAMtD,EAAM,GACpD,OAAOD,KAAKG,MAAMqD,GAG0CE,CAAiBJ,EAAMZ,OAAS,K,QCJjFiB,EAAqB,WAChC,IACEC,EAAQ,IAAIC,IACZC,EAAmB,SAACC,GAClB,IAAMC,EAAYJ,EAAMK,IAAIF,GAE5B,GAAIC,EACF,OAAOA,EAIT,IAAME,EAAgBC,IAAWC,OAAOL,GAAcM,KAAI,SAACC,GAAD,OAAUA,EAAKC,UAMzE,OAFAX,EAAMY,IAAIT,EAAcG,GAEjBA,GAGX,OAAO,SAACO,GACN,OAAOpB,EAAmBoB,EAAcJ,IAAIP,GAAkBY,SArBhC,GCHnB,WACbC,EACAC,EACAC,GAEA,MAAO,CACLC,cAAc,EACdb,IAFK,WAGH,IAAMc,EAAQF,EAAWE,MAAOC,KAAKC,MAOrC,OALAC,OAAOC,eAAeF,KAAML,EAAa,CACvCG,QACAD,cAAc,EACdM,UAAU,IAELL,KCfAM,EAAb,kCAGaC,EACX,WAAmBC,GAAgB,yBAAhBA,SAIRC,EACX,WAAmBC,GAAkB,yBAAlBA,WAIRC,EAAb,kCAAaA,EACJC,OAAiB,SAGnB,I,sBCEKC,GDFCC,GACX,WAAmBJ,GAAkB,yBAAlBA,Y,SCCTG,O,qBAAAA,I,6BAAAA,I,kBAAAA,Q,KAML,IAAME,IAAb,EAOGC,IAAWC,OAPd,aAoBE,aAAe,IAAD,wTAJNC,0BAA2B,EAIrB,KAHNC,gBAAiB,EAGX,KAFNC,kBAAmB,EAEb,KAsOdC,UAAY,SAAC3E,IACPA,GAAUA,EAAK4E,iBAAiBhB,IAAa5D,EAAK4E,MAAQ,IAAIhB,IAtOlEJ,KAAKqB,qBAAuBrB,KAAKsB,uBAAuBtB,KAAKqB,sBAC7DrB,KAAKuB,SAAWvB,KAAKsB,uBAAuBtB,KAAKuB,UAEjDpH,OAAOqH,iBAAiB,SAAUC,oBAAS,WACzC,EAAKC,aAAexH,MACnB,MAEHyH,aAAS,WACP,OAAO,EAAKD,gBACX,WACD,EAAKE,UAGP5B,KAAK4B,OAlCT,mIAsCQ5B,KAAKiB,eAtCb,uBAuCMjB,KAAKkB,kBAAmB,EAvC9B,4BA2C8BrG,EAAkBmF,KAAK0B,cAAzCzG,EA3CZ,EA2CYA,QAASE,EA3CrB,EA2CqBA,KAEjB6E,KAAK/E,QAAUA,EACf+E,KAAK7E,KAAOA,EACZ6E,KAAK6B,SAAWpH,IAChBuF,KAAK8B,WAAatH,IAElBwF,KAAK+B,WAlDT,UAoDY/B,KAAKgC,sBApDjB,oBAqDWhC,KAAKgB,yBArDhB,4CAsDchB,KAAKiC,eAAe,MAtDlC,mCAuDcjC,KAAKqB,wBAvDnB,mCA0DYrB,KAAKuB,YA1DjB,gHAwFIvB,KAAKiB,gBAAiB,IAxF1B,sCA4FIjB,KAAKiB,gBAAiB,EAElBjB,KAAKkB,kBACPlB,KAAK4B,OAGP5B,KAAKkB,kBAAmB,IAlG5B,4CAuGI,OAAOlB,KAAKkB,mBAvGhB,qCA0GuBpH,GA1GvB,qEA2GSkG,KAAKgC,sBA3Gd,0CA4GYnI,EAAMC,IA5GlB,4NAkHQmB,EAAkC+E,KAAlC/E,QAASE,EAAyB6E,KAAzB7E,KAAM+G,EAAmBlC,KAAnBkC,KAAML,EAAa7B,KAAb6B,SACvBM,EAAaN,EAAW,GAAK,EAnHnC,EAoH2C7B,KAAKoC,WAAhCC,EApHhB,EAoHQ7G,OAAwB8G,EApHhC,EAoH2B7G,IACrB8G,EAAeL,EAAKI,GAAQD,GAC5BD,EAAapC,KAAKwC,YAAYD,GAK5B5E,EAAWvC,EADM,CAAEH,UAASE,SAE5BsH,EAAY,SAAC,GAAgC,IAA9BjH,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,IAEnBiH,EAAKR,EAAKzG,GAAKD,GACfgB,EAAO,EAAKgG,YAAYE,GAEtBH,IAAiBG,EACnBN,EAAWhB,MAAQ,IAAIb,EAAWE,EAAgBC,QAElDlE,EAAK4E,MAAQ,IAAIb,EAAW7B,EAAkB,CAC5C,OAAQ,QAAS,QAAS,OAAQ,SAAU,OAAQ,SAAU,UAAW,aAAc,cAAe,mBAI5Gb,EAAuC,SAAAG,GAAK,OAAIA,EAAMX,QAAQoF,IAzItE,mBA2IYzC,KAAK2C,qBACThF,EACAwE,EACAtE,IA9IR,iCAkJUmC,KAAKiC,eAAe,MAlJ9B,UAqJYW,EAAQ,SAAOnG,GAAP,mBAAAlB,EAAAwC,OAAA,uDAEK,EAafJ,EAAWpB,EAZkC,CAC3CtB,UAASE,OACTqB,KAAM,CACJhB,OAAQ6G,EACR5G,IAAK6G,GAEP7F,UACAf,UARa,EASbC,OATa,EAUbC,UAAWX,EAVE,EAWbY,OAAQV,EAXK,IAcfsH,EAAY,SAAC,GAAgC,IAA9BjH,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,IAEnBiH,EAAKR,EAAKzG,GAAKD,GACfgB,EAAO,EAAKgG,YAAYE,GAEtBH,IAAiBG,GACnB,EAAKvB,UAAU3E,IAGnBqB,EAAuC,SAAAG,GAAK,OAAIA,EAAMX,QAAQoF,IAzBpD,WAAAlH,EAAA,MA2BN,EAAKoH,qBACThF,EACa,IAAbwE,EACAtE,IA9BU,sCArJpB,MAuLOgE,GAvLP,iDAuLyBe,EAAM,CACvB,CAAE7G,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,GAAI,MA3LrB,mCA8LY4G,EAAM,CACV,CAAE7G,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,GAAI,GACb,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,MApMnB,eAwMIoG,EAAWhB,MAAQ,IAAIX,EAEnBoC,EAA+BC,YAAYC,MACzCC,EAAqBpJ,SAASqJ,IAAWD,oBA3MnD,oBA6MUhD,KAAKiC,eAAoC,GAArBe,IA7M9B,eAiNQE,EAA6C,CAC3CjI,UAASE,OAAMqB,KAAM,CAAEhB,OAAQ6G,EAAW5G,IAAKuE,KAAK7E,KAAO,GAAKsB,QAAS,CACvE,CAAEV,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,KAGhB2B,EAAWpB,EAAqB2G,GAChCT,EAAY,SAAC,GAAgC,IAA9BjH,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,IAEnBiH,EAAKR,EAAKzG,GAAKD,GACfgB,EAAO,EAAKgG,YAAYE,GAE1B,EAAKvB,UAAU3E,IAEjBqB,EAAuC,SAAAG,GAAK,OAAIA,EAAMX,QAAQoF,IAhOtE,oBAkOYzC,KAAK2C,qBACThF,EACA,GACAE,IArOR,cA0OMsF,EAAWH,GAAsBF,YAAYC,MAAQF,IAExC,GA5OnB,4CA6OY7C,KAAKiC,eAAekB,IA7OhC,QAgPInD,KAAKmB,UAAUiB,GAEfpC,KAAKgB,0BAA2B,EAlPpC,oFAsPc0B,GACV,OAAO1C,KAAKhC,MAAMgB,IAAI0D,KAvP1B,yIAiQMU,EAAK,UACLC,EAAK,KACLC,EAAK,UAEDC,EAAYvD,KAAK6B,UAAY7B,KAAK8B,WAAc,CACpD,CAACsB,EAAIC,EAAID,GACT,CAACA,EAAIA,EAAIA,GACT,CAACC,EAAIA,EAAID,GACT,CAACE,EAAIA,EAAIA,GACT,CAACA,EAAID,EAAIC,GACT,CAACA,EAAIA,EAAIA,GACT,CAACF,EAAIC,EAAID,GACT,CAACA,EAAIA,EAAIA,GACT,CAACC,EAAIA,EAAID,IACP,CACF,CAACA,EAAIC,EAAID,EAAIE,EAAIA,EAAIA,EAAIF,EAAIC,EAAID,GACjC,CAACA,EAAIA,EAAIA,EAAIE,EAAID,EAAIC,EAAIF,EAAIA,EAAIA,GACjC,CAACC,EAAIA,EAAID,EAAIE,EAAIA,EAAIA,EAAID,EAAIA,EAAID,IAIjCI,EAAaD,EAAS,GAAG9F,OASzBE,EAAWpB,EAPkC,CAC3CtB,QAASuI,EAAYrI,KAFboI,EAAS9F,OAEmBjB,KAAM,CAAEhB,OAAQ,EAAGC,IAAK,GAAKgB,QAAS,CACxE,CAAEV,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,MAIfoG,EAAapC,KAAKoC,WAClBqB,EAAe,SAAC,GAAwC,IAAtChI,EAAqC,EAArCA,IAAKD,EAAgC,EAAhCA,OACrB,OAAO,EAAK0G,KAAKzG,EAAM2G,EAAW3G,IAAMwC,EAAkBsF,GAAU9H,KAAKD,EAAS4G,EAAW5G,OAASyC,EAAkBsF,GAAU/H,SAEpIiH,EAAY,SAAC,GAAgC,IAA9BjH,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,IAEnBiH,EAAKe,EAAa,CAAEjI,SAAQC,QAC5Be,EAAO,EAAKgG,YAAYE,GAEpBpC,EAAQiD,EAAS9H,GAAKD,GAExB8E,IACF9D,EAAK4E,MAAQ,IAAIf,EAAWC,KAGhCzC,EAAuC,SAAAG,GAAK,OAAIA,EAAMX,QAAQoF,IA/SpE,mBAiTUzC,KAAK2C,qBACThF,EACA,IACAE,IApTN,iCAuTUmC,KAAKiC,eAAe,MAvT9B,iCAyTUjC,KAAK2C,qBACThF,EACA,IACA,SAAAK,GAAK,OAAIA,EAAMX,SAAQ,gBAAG7B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,IAAX,OACrB,EAAK0F,UAAU,EAAKqB,YAAYiB,EAAa,CAAEjI,SAAQC,iBA7T/D,kFAmUI,IAAIiI,EAAqB,GAEzB1D,KAAKhC,MAAM4E,QAEX,IAAK,IAAInH,EAAM,EAAGA,EAAMuE,KAAK7E,KAAMM,IAAO,CACxCiI,EAAOnG,KAAK,IAEZ,IAAK,IAAI/B,EAAS,EAAGA,EAASwE,KAAK/E,QAASO,IAAU,CACpD,IAAMmI,EAAM,UAAMlI,EAAN,YAAaD,GAEzBkI,EAAOjI,GAAK8B,KAAKoG,GAEjB3D,KAAKhC,MAAMuB,IAAIoE,EAAQ,CACrBvC,MAAO,IAAIhB,KAKjBJ,KAAKkC,KAAOwB,IArVhB,6CAwViCE,GAAmB,IAAD,OAC/C,OAAO,0CAAArI,EAAAwC,OAAA,oDACD,EAAKiE,sBADJ,qDAGL,EAAK6B,iBAHA,WAAUC,EAAV,yBAAUA,EAAV,0BAAAvI,EAAA,MAICqI,EAAOG,MAAM,EAAMD,IAJpB,OAKL,EAAKE,gBALA,wCAzVX,2CAkWqCrG,EAAyBC,EAAmBC,GAlWjF,4FAmWUH,EAAgBC,EAAUC,EAAWC,EAASmC,KAAKgC,sBAnW7D,kFAgEI,OAAO/D,EAAkB+B,KAAKkC,QAhElC,6BAqEI,OAAOlC,KAAK/E,QAAU+E,KAAK7E,OArE/B,mCA4EI,OL8KF,SAAC,GAAuF,IAArFF,EAAoF,EAApFA,QAASE,EAA2E,EAA3EA,KAAM0G,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,WAC1B,OAAKD,GAAaA,IAAaC,EACtB,CACLtG,OAAQP,EAAU,EAClBQ,IAAK,EACLK,OAAQ,CACNC,EAAG,EACHC,EAAG,IAIA,CACLR,OAAQ,EACRC,IAAKN,EAAO,EACZW,OAAQ,CACNC,EAAG,EACHC,EAAG,IK9LFiI,CAAgB,CAAEhJ,QAFuB+E,KAAxC/E,QAE0BE,KAFc6E,KAA/B7E,KAEuB0G,SAFQ7B,KAAzB6B,SAE2BC,WAFF9B,KAAf8B,eA1ErC,6CAiFI,MAAO,CACLtG,OAAQ,EACRC,IAAK,OAnFX,0CACGqF,KADH,yEAEoB,KAFpB,kCAIGA,KAJH,yEAKiB,KALjB,sHAOoC5G,OAPpC,sCAQG4G,KARH,yEAQkCrG,OARlC,wCASGqG,KATH,yEASoCtG,OATpC,kCAUGsG,KAVH,wEAWqB,MAXrB,mCAYGA,KAZH,yEAayBH,GAAOuD,WAbhC,oCAcGpD,KAdH,yEAekB,IAAIlC,OAftB,sCA8DGuF,KA9DH,yGAmEGA,KAnEH,2GAwEGA,KAxEH,2HA+EGA,KA/EH,kIAqGGpE,GArGH,uHAqPGA,GArPH,4GAiUGqE,KAjUH,wEA4WeC,GALE,WACf,OAAO,IAAIxD,IC7XPyD,GAAcC,IAAMC,cAAkC,MAE/CC,GAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjCC,EAAQC,YAAcP,IAC5B,OAAO,kBAACC,GAAYO,SAAb,CAAsB/E,MAAO6E,GAAQD,IAGjCI,GAAU,WACrB,IAAMH,EAAQJ,IAAMQ,WAAWT,IAE/B,IAAKK,EAEH,MAAM,IAAIK,MAAM,+CAGlB,OAAOL,GCXHM,GAAuBC,aAAS,YAA6B,IAK7DC,EALmCzC,EAAyB,EAAzBA,GAGrCtB,GAAoBoB,EADFsC,KAAhBtC,aAC8BE,GAAItB,MAoBtC,OAhBIA,aAAiBb,IACnB4E,EAAY,kBAAC,GAAU/D,IAGrBA,aAAiBX,IACnB0E,EAAY,kBAAC,GAAD,OAGV/D,aAAiBR,KACnBuE,EAAY,kBAAC,GAAS/D,IAGpBA,aAAiBf,IACnB8E,EAAY,kBAAC,GAAU/D,IAIvB,oCACG+D,MAKMC,GAA8B,SAAC,GAAD,IAAG5E,EAAH,EAAGA,QAAH,OACzC,yBAAK6E,UAAWC,IAAWC,IAAO/I,KAAM+I,IAAOC,YAC5ChF,IAIQiF,GAAuB,kBAClC,yBAAKJ,UAAWC,IAAWC,IAAO/I,KAAM+I,IAAOC,UAAWD,IAAOG,iBAC9DjF,EAAgBC,SAIRiF,GAA4B,SAAC,GAAD,IAAGnF,EAAH,EAAGA,QAAH,OACvC,yBAAK6E,UAAWC,IAAWC,IAAO/I,KAAM+I,IAAOK,WAC5CpF,IAIQqF,GAA8B,SAAC,GAAe,IAAbvF,EAAY,EAAZA,MACtCwF,EAAsB,GAI5B,OAFAA,EAAIC,WAAazF,EAEV,yBAAK+E,UAAWC,IAAWC,IAAO/I,KAAM+I,IAAOS,WAAYC,MAAOH,KAG5Db,M,2BC5BAiB,GA/BY,SAAmBC,EAAmCC,EAAkBf,GA4BjG,OA5BuH,6MAyBrHgB,OAAS,kBAAM,kBAACF,EAAc,EAAKG,QAzBkF,oFAGnH,IAAMC,EAAUvG,KAAKuG,QAErBA,GAAWA,EAAQC,UAAUC,IAAIpB,KALkF,6CAgBnH,IAAMkB,EAAUvG,KAAKuG,QAErBA,GAAWA,EAAQC,UAAUE,OAAOrB,KAlB+E,8CAsBnH,OAAO,IAtB4G,8BAYnH,OAFYsB,SAASC,cAAcR,IAEjB,SAZiG,GACtF7B,IAAM4B,YCEnCU,GAAO3B,aAAS,WAAO,IACnBhD,EAAS4C,KAAT5C,KAER,OACE,yBAAKmD,UAAWE,IAAOrD,MAEnBA,EAAK9C,KAAI,SAACnE,EAASQ,GAAV,OACP,kBAAC,GAAD,CAAKqL,IAAKrL,GAENR,EAAQmE,KAAI,SAACsD,EAAIlH,GAAL,OACV,kBAAC,GAAD,CAAKsL,IAAKtL,GACR,kBAACuL,GAAD,CAAMrE,GAAIA,gBAWtBsE,GAAgB,SAAC,GAAD,IAAGtC,EAAH,EAAGA,SAAH,OAAkB,yBAAKW,UAAWE,IAAO9J,KAAMiJ,IAE/DuC,GAAgB,SAAC,GAAkB,IAAhBvC,EAAe,EAAfA,SACvB,OACE,yBACEW,UACEC,IAAWC,IAAO2B,MAGnBxC,IAKQwB,MAAmBW,GAAM,OAAQtB,IAAO4B,a,SCxCjDC,GCEkB,SAAmBjB,GAQzC,OAN6C,SAAC,GAAD,IAAMG,EAAN,0BACzC,kBAAC,GAAD,KACE,kBAACH,EAAcG,KDNCe,CAAgBR,IAQzBS,GANO,WACpB,OACE,kBAACF,GAAD,OEIgBG,QACW,cAA7BpN,OAAOqN,SAASC,UAEe,UAA7BtN,OAAOqN,SAASC,UAEhBtN,OAAOqN,SAASC,SAASC,MACvB,2DCZNC,IAAStB,OAAO,kBAAC,GAAD,MAAQM,SAASiB,eAAe,SDqI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBE5InBC,EAAOC,QAAU,CAAC,mBAAqB,OAAO,KAAO,mBAAmB,UAAY,wBAAwB,eAAiB,6BAA6B,kBAAkB,8BAA8B,SAAW,yB,kBCArND,EAAOC,QAAU,CAAC,YAAc,OAAO,YAAc,0BAA0B,KAAO,mBAAmB,IAAM,kBAAkB,IAAM,qB","file":"static/js/main.738a2f72.chunk.js","sourcesContent":["import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { minCellSize } = gridStyle\n\nexport const\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","import { isEqual, uniqWith } from 'lodash'\nimport { MIN_CELL_SIZE } from '../constants'\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const getViewportSize = (): IViewportSize => {\n  const { innerHeight: viewportHeight, innerWidth: viewportWidth } = window\n\n  return {\n    viewportWidth,\n    viewportHeight,\n  }\n}\n\nexport const isPortraitMode = (): boolean => {\n  const { viewportWidth, viewportHeight } = getViewportSize()\n\n  return viewportWidth < viewportHeight\n}\n\nexport const isMobileMode = (): boolean => {\n  const\n    { minColumns, minRows } = getDesktopMinColumnsAndRows(),\n    { viewportHeight, viewportWidth } = getViewportSize()\n\n  return viewportWidth <= MIN_CELL_SIZE * minColumns || viewportHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 11,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => {\n  return {\n    minColumns: 7,\n    minRows: 7,\n  }\n}\n\nexport const getMinGridSize = () => (\n  isMobileMode() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nexport const calculateGridSize = ({ viewportWidth, viewportHeight }: IViewportSize): IGridParams => {\n  const\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(viewportHeight / minRows, viewportWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n\n  let\n    columns = Math.round(viewportWidth / gridItemSize),\n    rows = Math.round(viewportHeight / gridItemSize)\n\n  if (columns >= 25) {\n    columns = 25\n  } else if (columns <= minColumns) {\n    columns = minColumns\n  } else if (!(columns % 2)) {\n    columns++\n  }\n\n  if (rows >= 25) {\n    rows = 25\n  } else if (rows <= minRows) {\n    rows = minRows\n  } else if (!(rows % 2)) {\n    rows--\n  }\n\n  return {\n    columns,\n    rows,\n  }\n}\n\nexport const makeSpiralScenario = ({ columns, rows }: IGridParams) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      column = -1,\n      row = 0,\n      minColumn = 0,\n      minRow = 0,\n      maxColumn = columns,\n      maxRow = rows,\n      vector: I2DDirectionVector = {\n        x: 1,\n        y: 0\n      }\n\n    const\n      getVectorX = () => vector.x,\n      getVectorY = () => vector.y,\n      getNext = (): { nextX: number, nextY: number } | null => {\n        const\n          nextX = column + getVectorX(),\n          nextY = row + getVectorY()\n\n        if (getVectorY() === 0) {\n          if (minColumn === maxColumn) return null\n\n          if (nextX >= maxColumn) {\n            vector = {\n              x: 0,\n              y: 1,\n            }\n            minRow++\n            return getNext()\n          }\n\n          if (nextX < minColumn) {\n            vector = {\n              x: 0,\n              y: -1,\n            }\n            maxRow--\n            return getNext()\n          }\n        }\n\n        if (getVectorX() === 0) {\n          if (minRow === maxRow) return null\n\n          if (nextY >= maxRow) {\n            vector = {\n              x: -1,\n              y: 0,\n            }\n            maxColumn--\n            return getNext()\n          }\n\n          if (nextY < minRow) {\n            vector = {\n              x: 1,\n              y: 0,\n            }\n            minColumn++\n            return getNext()\n          }\n        }\n\n        return { nextX, nextY }\n      }\n\n    while (true) {\n      const next = getNext()\n\n      if (!next) break\n\n      const { nextX, nextY } = next\n\n      column = nextX\n      row = nextY\n\n      yield [{ column, row }]\n    }\n  }\n})\n\nexport const makeFromCellScenario = (\n  { columns, rows, cell, vectors, minColumn, minRow, maxColumn, maxRow }: IFromCellScenarioArguments\n) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let\n      previousCells = [cell]\n\n    const\n      _minColumn = minColumn ? minColumn : 0,\n      _maxColumn = maxColumn ? maxColumn - 1 : columns - 1,\n      _minRow = minRow ? minRow : 0,\n      _maxRow = maxRow ? maxRow - 1 : rows - 1,\n      filteredVectors = uniqWith(\n        vectors.filter(\n          vector => !(vector.x === vector.y && vector.x === 0)\n        ),\n        isEqual\n      ),\n      yieldedCells = [{ ...cell }],\n      getNext = () => {\n        const nextCells: IGridCell[] = []\n\n        filteredVectors.forEach(vector => {\n          previousCells.forEach(({ column, row }) => {\n            if (\n              (vector.x === -1 && column <= cell.column) ||\n              (vector.x === 1 && column >= cell.column) ||\n              (vector.y === -1 && row <= cell.row) ||\n              (vector.y === 1 && row >= cell.row)\n            ) {\n              const cell = {\n                column: column + vector.x,\n                row: row + vector.y,\n              }\n\n              if (yieldedCells.find(({ column, row }) => column === cell.column && row === cell.row)) return\n\n              yieldedCells.push(cell)\n              nextCells.push(cell)\n            }\n          })\n        })\n\n        const filtered = uniqWith(\n          nextCells.filter(\n            ({ column, row }) =>\n              (column >= _minColumn && row >= _minRow && column <= _maxColumn && row <= _maxRow)\n          ),\n          isEqual\n        )\n\n        if (!filtered.length) return null\n\n        return filtered\n      }\n\n    yield [{ ...cell }]\n\n    while (true) {\n      const nextCells = getNext()\n\n      if (!nextCells) break\n\n      yield nextCells\n\n      previousCells = nextCells\n    }\n  }\n})\n\nexport const runGridScenario = async (\n  scenario: TGridScenario,\n  stepDelay: number,\n  process: TRunScenarioProcessFunction,\n  stopChecker?: () => boolean\n) => {\n  if (stopChecker && stopChecker()) return\n\n  for await (const cells of scenario) {\n    // console.log(stopChecker && stopChecker())\n    if (stopChecker && stopChecker()) {\n      break\n    }\n\n    const result = process(cells)\n\n    if (result) break\n\n    if (stepDelay > 0) {\n      await delay(stepDelay)\n    }\n  }\n}\n\nexport const getFilledMatrix = <T>({ columns, rows, value }: IGridParams & { value: T }): T[][] => {\n  const result: T[][] = []\n\n  for (let row = 0; row < rows; row++) {\n    result.push([])\n    for (let column = 0; column < columns; column++) {\n      result[row].push(value)\n    }\n  }\n\n  return result\n}\n\nexport const getMenuPosition =\n  ({ columns, rows, isMobile, isPortrait }: IGetMenuPositionArguments): IMenuPosition => {\n    if (!isMobile || (isMobile && !isPortrait)) {\n      return {\n        column: columns - 1,\n        row: 1,\n        vector: {\n          x: 0,\n          y: 1,\n        },\n      }\n    } else {\n      return {\n        column: 1,\n        row: rows - 1,\n        vector: {\n          x: 1,\n          y: 0,\n        }\n      }\n    }\n  }\n\nexport const getMatrixMidPoint = <T>(matrix: T[][]): IGridCell => {\n  let\n    row = Math.floor(matrix.length / 2),\n    column = Math.floor(matrix[0].length / 2)\n\n  return {\n    row,\n    column\n  }\n}\n","export const getOrderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const getRandomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n\nexport const getRandomArrayItem = <T>(array: T[]): T => array[getRandomInteger(array.length - 1)]\n","import { getRandomArrayItem } from './misc'\nimport { emojiIndex } from 'emoji-mart'\n\nexport const searchRandomEmoji = (() => {\n  const\n    cache = new Map(),\n    getSearchResults = (searchString: string): string[] => {\n      const fromCache = cache.get(searchString)\n\n      if (fromCache) {\n        return fromCache\n      }\n\n      // @ts-ignore\n      const searchResults = emojiIndex.search(searchString).map((item) => item.native)\n\n      // console.log(searchString, searchResults)\n\n      cache.set(searchString, searchResults)\n\n      return searchResults\n    }\n\n  return (searchStrings: string[]): string => {\n    return getRandomArrayItem(searchStrings.map(getSearchResults).flat())\n  }\n})()\n","export default function <T extends Function>(\n  target: object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n): TypedPropertyDescriptor<T> | void {\n  return {\n    configurable: true,\n    get(this: T): T {\n      const value = descriptor.value!.bind(this)\n\n      Object.defineProperty(this, propertyKey, {\n        value,\n        configurable: true,\n        writable: true,\n      })\n      return value\n    },\n  }\n}\n","export class EmptyModel {\n}\n\nexport class ColorModel {\n  constructor(public color: string) {\n  }\n}\n\nexport class EmojiModel {\n  constructor(public content: string) {\n  }\n}\n\nexport class HelloEmojiModel {\n  static symbol: string = '✋'\n}\n\nexport class TextModel {\n  constructor(public content: string) {\n  }\n}\n\nexport class IconModel {\n}\n\nexport class ImageModel {\n}\n\nexport class MenuItemModel {\n}\n\n\nexport type TCellModel = EmptyModel | EmojiModel | TextModel | HelloEmojiModel | IconModel | ImageModel | MenuItemModel\n","import { action, computed, observable, reaction } from 'mobx'\nimport { debounce } from 'lodash'\nimport {\n  calculateGridSize,\n  delay,\n  getMatrixMidPoint,\n  getMenuPosition,\n  getViewportSize,\n  isMobileMode,\n  isPortraitMode,\n  makeFromCellScenario,\n  makeSpiralScenario,\n  runGridScenario,\n} from '../helpers/grid'\nimport { searchRandomEmoji } from '../helpers/emoji'\nimport bind from '../decorators/bind'\nimport cellStyles from '../components/Cell/Cell.module.scss'\nimport { ColorModel, EmojiModel, EmptyModel, HelloEmojiModel, TCellModel } from '../models/cell'\n\nexport enum EViews { initial, application, snake }\n\nexport interface ICell {\n  model: TCellModel\n}\n\nexport class GridService {\n  @observable\n  columns: number = 0\n\n  @observable\n  rows: number = 0\n\n  @observable.struct viewportSize = getViewportSize()\n  @observable isMobile: boolean = isMobileMode()\n  @observable isPortrait: boolean = isPortraitMode()\n  @observable\n  grid: string[][] = []\n  @observable\n  private view: EViews = EViews.initial\n  @observable\n  private cells = new Map<string, ICell>()\n  private initialAnimationWasShown = false\n  private isAnimationRun = false\n  private initWasRequested = false\n\n  constructor() {\n    this.showInitialAnimation = this.withAnimationDecorator(this.showInitialAnimation)\n    this.place404 = this.withAnimationDecorator(this.place404)\n\n    window.addEventListener('resize', debounce(() => {\n      this.viewportSize = getViewportSize()\n    }, 400))\n\n    reaction(() => {\n      return this.viewportSize\n    }, () => {\n      this.init()\n    })\n\n    this.init()\n  }\n\n  private async init() {\n    if (this.isAnimationRun) {\n      this.initWasRequested = true\n      return\n    }\n\n    const { columns, rows } = calculateGridSize(this.viewportSize)\n\n    this.columns = columns\n    this.rows = rows\n    this.isMobile = isMobileMode()\n    this.isPortrait = isPortraitMode()\n\n    this.initGrid()\n\n    while (!this.isAnimationCanceled()) {\n      if (!this.initialAnimationWasShown) {\n        await this.delayAnimation(1000)\n        await this.showInitialAnimation()\n      }\n\n      await this.place404()\n    }\n  }\n\n  @computed\n  get middleCell(): IGridCell {\n    return getMatrixMidPoint(this.grid)\n  }\n\n  @computed\n  get square() {\n    return this.columns * this.rows\n  }\n\n  @computed\n  private get menuPosition(): IMenuPosition {\n    const { columns, rows, isMobile, isPortrait } = this\n\n    return getMenuPosition({ columns, rows, isMobile, isPortrait })\n  }\n\n  @computed\n  private get pageLeftCornerPosition(): IGridCell {\n    return {\n      column: 0,\n      row: 0\n    }\n  }\n\n  startAnimation() {\n    this.isAnimationRun = true\n  }\n\n  stopAnimation() {\n    this.isAnimationRun = false\n\n    if (this.initWasRequested) {\n      this.init()\n    }\n\n    this.initWasRequested = false\n  }\n\n  @bind\n  isAnimationCanceled() {\n    return this.initWasRequested\n  }\n\n  async delayAnimation(ms: number) {\n    if (!this.isAnimationCanceled()) {\n      await delay(ms)\n    }\n  }\n\n  async showInitialAnimation() {\n    const\n      { columns, rows, grid, isMobile } = this,\n      STEP_DELAY = isMobile ? 15 : 8,\n      { column: midColumn, row: midRow } = this.middleCell,\n      middleCellId = grid[midRow][midColumn],\n      middleCell = this.getCellData(middleCellId)\n\n    {\n      const\n        scenarioConfig = { columns, rows },\n        scenario = makeSpiralScenario(scenarioConfig),\n        iteration = ({ column, row }: IGridCell) => {\n          const\n            id = grid[row][column],\n            cell = this.getCellData(id)\n\n          if (middleCellId === id) {\n            middleCell.model = new EmojiModel(HelloEmojiModel.symbol)\n          } else {\n            cell.model = new EmojiModel(searchRandomEmoji([\n              'snow', 'happy', 'santa', 'gift', 'family', 'beer', 'coffee', 'cup tea', 'glass wine', 'celebration', 'orange fruit'\n            ]))\n          }\n        },\n        process: TRunScenarioProcessFunction = cells => cells.forEach(iteration)\n\n      await this.runAnimationScenario(\n        scenario,\n        STEP_DELAY,\n        process,\n      )\n    }\n\n    await this.delayAnimation(300)\n\n    {\n      const clear = async (vectors: I2DDirectionVector[]) => {\n        const\n          CLEAR_OFFSET = 1,\n          scenarioConfig: IFromCellScenarioArguments = {\n            columns, rows,\n            cell: {\n              column: midColumn,\n              row: midRow,\n            },\n            vectors,\n            minColumn: CLEAR_OFFSET,\n            minRow: CLEAR_OFFSET,\n            maxColumn: columns - CLEAR_OFFSET,\n            maxRow: rows - CLEAR_OFFSET,\n          },\n          scenario = makeFromCellScenario(scenarioConfig),\n          iteration = ({ column, row }: IGridCell) => {\n            const\n              id = grid[row][column],\n              cell = this.getCellData(id)\n\n            if (middleCellId !== id) {\n              this.clearCell(cell)\n            }\n          },\n          process: TRunScenarioProcessFunction = cells => cells.forEach(iteration)\n\n        await this.runAnimationScenario(\n          scenario,\n          STEP_DELAY * 2.5,\n          process,\n        )\n      }\n\n      !isMobile && await clear([\n        { x: 1, y: 1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n      ])\n\n      await clear([\n        { x: -1, y: 1 },\n        { x: -1, y: -1 },\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: 1, y: 1 },\n        { x: 0, y: 1 },\n      ])\n    }\n\n    middleCell.model = new HelloEmojiModel()\n\n    let beforeLastAnimationTimestamp = performance.now()\n    const helloAnimationTime = parseInt(cellStyles.helloAnimationTime)\n\n    await this.delayAnimation(helloAnimationTime * .9)\n\n    {\n      const\n        scenarioConfig: IFromCellScenarioArguments = {\n          columns, rows, cell: { column: midColumn, row: this.rows - 1 }, vectors: [\n            { x: 0, y: -1 },\n            { x: 1, y: 0 },\n            { x: -1, y: 0 },\n          ]\n        },\n        scenario = makeFromCellScenario(scenarioConfig),\n        iteration = ({ column, row }: IGridCell) => {\n          const\n            id = grid[row][column],\n            cell = this.getCellData(id)\n\n          this.clearCell(cell)\n        },\n        process: TRunScenarioProcessFunction = cells => cells.forEach(iteration)\n\n      await this.runAnimationScenario(\n        scenario,\n        20,\n        process,\n      )\n    }\n\n    const\n      endDelay = helloAnimationTime - (performance.now() - beforeLastAnimationTimestamp)\n\n    if (endDelay > 0) {\n      await this.delayAnimation(endDelay)\n    }\n\n    this.clearCell(middleCell)\n\n    this.initialAnimationWasShown = true\n  }\n\n  @bind\n  getCellData(id: string): ICell {\n    return this.cells.get(id)!\n  }\n\n  clearCell = (cell: ICell): void => {\n    if (cell && !(cell.model instanceof EmptyModel)) cell.model = new EmptyModel()\n  }\n\n  async place404() {\n    const\n      // #321A4F, #16203A, #103234\n      c1 = '#5a2f8e',\n      c2 = null,\n      c3 = '#267479'\n\n    const array404 = (this.isMobile && this.isPortrait) ? [\n      [c1, c2, c1],\n      [c1, c1, c1],\n      [c2, c2, c1],\n      [c3, c3, c3],\n      [c3, c2, c3],\n      [c3, c3, c3],\n      [c1, c2, c1],\n      [c1, c1, c1],\n      [c2, c2, c1],\n    ] : [\n      [c1, c2, c1, c3, c3, c3, c1, c2, c1],\n      [c1, c1, c1, c3, c2, c3, c1, c1, c1],\n      [c2, c2, c1, c3, c3, c3, c2, c2, c1],\n    ]\n\n    const\n      columns404 = array404[0].length,\n      rows404 = array404.length,\n      scenarioConfig: IFromCellScenarioArguments = {\n        columns: columns404, rows: rows404, cell: { column: 0, row: 0 }, vectors: [\n          { x: 0, y: 1 },\n          { x: 1, y: 1 },\n          { x: 1, y: 0 },\n        ]\n      },\n      scenario = makeFromCellScenario(scenarioConfig),\n      middleCell = this.middleCell,\n      getWithShift = ({ row, column }: IGridCell): string => {\n        return this.grid[row + middleCell.row - getMatrixMidPoint(array404).row][column + middleCell.column - getMatrixMidPoint(array404).column]\n      },\n      iteration = ({ column, row }: IGridCell) => {\n        const\n          id = getWithShift({ column, row }),\n          cell = this.getCellData(id)\n\n        const color = array404[row][column]\n\n        if (color) {\n          cell.model = new ColorModel(color)\n        }\n      },\n      process: TRunScenarioProcessFunction = cells => cells.forEach(iteration)\n\n    await this.runAnimationScenario(\n      scenario,\n      100,\n      process,\n    )\n\n    await this.delayAnimation(500)\n\n    await this.runAnimationScenario(\n      scenario,\n      40,\n      cells => cells.forEach(({ column, row }) =>\n        this.clearCell(this.getCellData(getWithShift({ column, row })))),\n    )\n  }\n\n  @action\n  private initGrid() {\n    let result: string[][] = []\n\n    this.cells.clear()\n\n    for (let row = 0; row < this.rows; row++) {\n      result.push([])\n\n      for (let column = 0; column < this.columns; column++) {\n        const cellId = `${row}-${column}`\n\n        result[row].push(cellId)\n\n        this.cells.set(cellId, {\n          model: new EmptyModel()\n        })\n      }\n    }\n\n    this.grid = result\n  }\n\n  private withAnimationDecorator(method: Function) {\n    return async (...args: any) => {\n      if (this.isAnimationCanceled()) return\n\n      this.startAnimation()\n      await method.apply(this, args)\n      this.stopAnimation()\n    }\n  }\n\n  private async runAnimationScenario(scenario: TGridScenario, stepDelay: number, process: TRunScenarioProcessFunction) {\n    await runGridScenario(scenario, stepDelay, process, this.isAnimationCanceled)\n  }\n}\n\nconst makeGrid = () => {\n  return new GridService()\n}\n\n\nexport default makeGrid\n","import React from 'react'\nimport makeGrid, { GridService } from '../services/GridService' // 6.x or mobx-react-lite@1.4.0\nimport { useLocalStore } from 'mobx-react'\n\nconst gridContext = React.createContext<GridService | null>(null)\n\nexport const GridProvider: React.FC = ({ children }) => {\n  const store = useLocalStore(makeGrid)\n  return <gridContext.Provider value={store}>{children}</gridContext.Provider>\n}\n\nexport const useGrid = () => {\n  const store = React.useContext(gridContext)\n\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useGrid must be used within a GridProvider.')\n  }\n\n  return store\n}\n","import React from 'react'\nimport { Properties as TCSSProperties } from 'csstype'\nimport styles from './Cell.module.scss'\nimport { observer } from 'mobx-react'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport classNames from 'classnames'\nimport { ColorModel, EmojiModel, HelloEmojiModel, TCellModel, TextModel } from '../../models/cell'\n\nconst CellComponentFactory = observer(({ id }: { id: string }) => {\n  const\n    { getCellData } = useGrid(),\n    model: TCellModel = getCellData(id).model\n\n  let component\n\n  if (model instanceof EmojiModel) {\n    component = <Emoji {...model}/>\n  }\n\n  if (model instanceof HelloEmojiModel) {\n    component = <HelloEmoji/>\n  }\n\n  if (model instanceof TextModel) {\n    component = <Text {...model}/>\n  }\n\n  if (model instanceof ColorModel) {\n    component = <Color {...model}/>\n  }\n\n  return (\n    <>\n      {component}\n    </>\n  )\n})\n\nexport const Emoji: React.FC<EmojiModel> = ({ content }) => (\n  <div className={classNames(styles.cell, styles.cellEmoji)}>\n    {content}\n  </div>\n)\n\nexport const HelloEmoji: React.FC = () => (\n  <div className={classNames(styles.cell, styles.cellEmoji, styles.cellHelloEmoji)}>\n    {HelloEmojiModel.symbol}\n  </div>\n)\n\nexport const Text: React.FC<TextModel> = ({ content }) => (\n  <div className={classNames(styles.cell, styles.cellText)}>\n    {content}\n  </div>\n)\n\nexport const Color: React.FC<ColorModel> = ({ color }) => {\n  const css: TCSSProperties = {}\n\n  css.background = color\n\n  return <div className={classNames(styles.cell, styles.cellColor)} style={css}/>\n}\n\nexport default CellComponentFactory\n","import React from 'react'\n\ninterface IHocProps {\n}\n\nconst withContainerClass = <P extends object>(Component: React.ComponentType<P>, selector: string, className: string) => {\n  class WithContainerClass extends React.Component<P & IHocProps> {\n    componentDidMount(): void {\n      const element = this.element\n\n      element && element.classList.add(className)\n    }\n\n    get element(): Element | null {\n      const\n        element = document.querySelector(selector)\n\n      return element || null\n    }\n\n    componentWillUnmount(): void {\n      const element = this.element\n\n      element && element.classList.remove(className)\n    }\n\n    shouldComponentUpdate(): boolean {\n      return false\n    }\n\n    render = () => <Component {...this.props as P} />\n  }\n\n  return WithContainerClass\n}\n\nexport default withContainerClass\n","import React from 'react'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport Cell from '../Cell'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport { observer } from 'mobx-react'\nimport withContainerClass from '../../hoc/withContainerClass'\n\nconst Grid = observer(() => {\n  const { grid } = useGrid()\n\n  return (\n    <div className={styles.grid}>\n      {\n        grid.map((columns, row) => (\n          <Row key={row}>\n            {\n              columns.map((id, column) => (\n                <Col key={column}>\n                  <Cell id={id}/>\n                </Col>\n              ))\n            }\n          </Row>\n        ))\n      }\n    </div>\n  )\n})\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst Col: React.FC = ({ children }) => {\n  return (\n    <div\n      className={\n        classNames(styles.col)\n      }\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default withContainerClass(Grid, 'html', styles.gridWrapper)\n","import React from 'react'\nimport Grid from './components/Grid'\nimport withGridContext from './hoc/withGridContext'\n\nconst GridWithContext = withGridContext(Grid)\n\nconst App: React.FC = () => {\n  return (\n    <GridWithContext/>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { GridProvider } from '../contextProviders/GridProvider'\n\ninterface IHocProps {\n}\n\nconst withGridContext = <P extends object>(Component: React.ComponentType<P>) => {\n  const\n    WithGridContext: React.FC<P & IHocProps> = ({ ...props }) => (\n      <GridProvider>\n        <Component {...props as P} />\n      </GridProvider>\n    )\n\n  return WithGridContext\n}\n\nexport default withGridContext\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"helloAnimationTime\":\"1400\",\"cell\":\"Cell_cell__2Y63x\",\"cellEmoji\":\"Cell_cellEmoji__210BA\",\"cellHelloEmoji\":\"Cell_cellHelloEmoji__Khd3i\",\"hello-animation\":\"Cell_hello-animation__zIPad\",\"cellMenu\":\"Cell_cellMenu__2IVHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"gridWrapper\":\"Grid_gridWrapper__Rwaf7\",\"grid\":\"Grid_grid__24j1p\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\"};"],"sourceRoot":""}