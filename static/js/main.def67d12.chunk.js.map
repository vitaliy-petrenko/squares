{"version":3,"sources":["components/Flipper/Flipper.module.scss","components/Grid/Grid.module.scss","services/GridService.ts","constants.ts","helpers/grid.ts","helpers/emoji.ts","helpers/misc.ts","helpers/scenario.ts","contextProviders/GridProvider.tsx","components/Flipper/Flipper.tsx","components/Grid/Grid.tsx","App.tsx","hoc/withGridContext.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EViews","maxCellSize","gridStyle","minCellSize","MAX_CELL_SIZE","parseInt","MIN_CELL_SIZE","getWindowSize","window","windowHeight","innerHeight","windowWidth","innerWidth","getMobileMinColumnsAndRows","isPortrait","isPortraitMode","minColumns","minRows","getMinAndMaxCellSize","getMinGridSize","isMobile","makeOrderedSpiral","rows","columns","result","j","push","Array","col","row","minCol","minRow","maxCol","maxRow","vector","x","y","value","getVectorX","getVectorY","getNext","nextX","nextY","fill","resultVector","next","emojiList","getRandomEmoji","max","min","rand","Math","random","round","randomInteger","length","delay","ms","Promise","resolve","setTimeout","GridService","observable","struct","this","init","addEventListener","debounce","console","log","windowSize","reaction","gridItemSize","calculateGridSize","needToShowInitialAnimation","showInitialAnimation","spiral","spiralGrid","map","id","uuid","v4","content","withAnimation","grid","square","middleX","floor","middleY","flipper","abs","initial","computed","action","makeGrid","gridContext","React","createContext","GridProvider","children","store","useLocalStore","Provider","Flipper","props","timeout","flip","setState","prevState","state","clearTimeout","side1Content","side2Content","className","classNames","styles","flipDirectionClass","isFlipped","flipperIn","flipperSide","withoutAnimation","getFlipDirectionKey","Component","Grid","observer","useContext","Error","useGrid","gridIn","key","Row","Col","colIn","GridWithContext","withGridContext","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,QAAU,yBAAyB,iBAAmB,kCAAkC,YAAc,6BAA6B,UAAY,2BAA2B,UAAY,2BAA2B,eAAiB,gCAAgC,eAAiB,gCAAgC,eAAiB,gCAAgC,eAAiB,gCAAgC,eAAiB,gCAAgC,eAAiB,gCAAgC,eAAiB,gCAAgC,eAAiB,kC,sDCA/oBD,EAAOC,QAAU,CAAC,YAAc,OAAO,YAAc,QAAQ,KAAO,mBAAmB,OAAS,qBAAqB,IAAM,kBAAkB,IAAM,kBAAkB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,YAAc,0BAA0B,aAAa,yBAAyB,aAAe,2BAA2B,cAAc,0BAA0B,MAAQ,sB,8ECMj7BC,E,4ICLJC,EAA6BC,IAA7BD,YAAaE,EAAgBD,IAAhBC,YAGnBC,EAAgBC,SAASJ,GACzBK,EAAgBD,SAASF,GCMdI,EAAgB,WAAoB,IAAD,EACiBC,OAA1CC,EADyB,EACtCC,YAER,MAAO,CACLC,YAJ4C,EACXC,WAIjCH,iBAeSI,EAA6B,WACxC,IAAMC,EAZe,WAAgB,IAAD,EACEP,IAEtC,OAHoC,EAC5BI,YAD4B,EACfF,aAWFM,GAGnB,MAAO,CACLC,WAAYF,EAAa,EAAI,EAC7BG,QAASH,EAAa,EAAI,IAIxBI,EAAuB,iBAAO,CAClCZ,gBACAF,kBAYWe,EAAiB,kBATN,WAAO,IAEzBb,EAAkBY,IAAlBZ,cAFwB,EApBoB,CAChDU,WAAY,GACZC,QAAS,IAqBLD,EAHwB,EAGxBA,WAAYC,EAHY,EAGZA,QAHY,EAIMV,IAA9BE,EAJwB,EAIxBA,aAEJ,OAN4B,EAIVE,aAEIL,EAAgBU,GAAcP,GAAgBH,EAAgBW,EAIpFG,GAAaP,IA9BmC,CAChDG,WAAY,GACZC,QAAS,KAiGEI,EAAoB,SAACC,EAAcC,GAG9C,IAFA,IAAIC,EAA6B,GAExBC,EAAI,EAAGA,EAAIH,EAAMG,IACxBD,EAAOE,KAAKC,MAAMJ,IAqGpB,IAlGA,IACEK,GAAO,EACPC,EAAM,EACNC,EAAS,EACTC,EAAS,EACTC,EAAST,EACTU,EAASX,EACTY,EAAoB,CAClBC,EAAG,EACHC,EAAG,GAELC,EAAQ,EAGRC,EAAa,kBAAMJ,EAAOC,GAC1BI,EAAa,kBAAML,EAAOE,GAC1BI,EAAU,SAAVA,IAEE,IACEC,EAAQb,EAAMU,IACdI,EAAQb,EAAMU,IAEhB,GAAqB,IAAjBA,IAAoB,CACtB,GAAIT,IAAWE,EAAQ,OAAO,KAE9B,GAAIS,GAAST,EAMX,OALAE,EAAS,CACPC,EAAG,EACHC,EAAG,GAELL,IACOS,IAGT,GAAIC,EAAQX,EAMV,OALAI,EAAS,CACPC,EAAG,EACHC,GAAI,GAENH,IACOO,IAIX,GAAqB,IAAjBF,IAAoB,CACtB,GAAIP,IAAWE,EAAQ,OAAO,KAE9B,GAAIS,GAAST,EAMX,OALAC,EAAS,CACPC,GAAI,EACJC,EAAG,GAELJ,IACOQ,IAGT,GAAIE,EAAQX,EAMV,OALAG,EAAS,CACPC,EAAG,EACHC,EAAG,GAELN,IACOU,IAIX,MAAO,CAAEC,QAAOC,UAGlBC,EAAO,WAAO,IAAD,EAEET,EAATC,EAFO,EAEPA,EAAGC,EAFI,EAEJA,EACLQ,EAAe,CAAET,IAAGC,MAElBR,GAAOC,KACC,IAANM,GAAiB,IAANC,GAAWR,IAAQI,EAAS,IACzCY,EAAaR,EAAI,GAGT,IAAND,GAAiB,IAANC,GAAWP,IAAQI,EAAS,IACzCW,EAAaT,GAAK,IAGT,IAAPA,GAAkB,IAANC,GAAWR,IAAQE,IACjCc,EAAaR,GAAK,GAGV,IAAND,IAAkB,IAAPC,GAAYP,IAAQE,IACjCa,EAAaT,EAAI,IAIrBX,EAAOK,GAAKD,GAAO,CACjBS,MAAOA,IACPH,OAAO,eAAMU,OAIN,CACX,IAAMC,EAAOL,IAEb,IAAKK,EAAM,MAHA,IAKHJ,EAAiBI,EAAjBJ,MAAOC,EAAUG,EAAVH,MAEfd,EAAMa,EACNZ,EAAMa,EAENC,IAGF,OAAOnB,GClPHsB,EAAsB,CAAC,eAAM,eAAM,eAAM,qBAAO,qBAAO,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,qBAAO,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,4BAG/ZC,EAAiB,WAC5B,OAAOD,ECJoB,SAACE,GAAkC,IAArBC,EAAoB,uDAAN,EACnDC,EAAOD,EAAM,GAAME,KAAKC,UAAYJ,EAAMC,EAAM,GACpD,OAAOE,KAAKE,MAAMH,GDEDI,CAAcR,EAAUS,OAAS,K,yBEHvCC,G,wBAAQ,SAACC,GACpB,OAAO,IAAIC,SAAQ,SAAUC,GAC3BC,WAAWD,EAASF,S,SLEZzD,O,qBAAAA,I,6BAAAA,I,kBAAAA,M,KAYL,IAAM6D,GAAb,EAUGC,IAAWC,OAVd,aAmFE,aAAe,IAAD,oMACZC,KAAKC,OAELzD,OAAO0D,iBAAiB,SAAUC,oBAAS,WACzCC,QAAQC,IAAI,UACZ,EAAKC,WAAa/D,MACjB,MAEHgE,aAAS,WACP,OAAO,EAAKD,cACX,WACD,EAAKL,UA9FX,mDAgBIG,QAAQC,IAAI,QADP,ME0BwB,SAAC,GAA6D,IAA3D1D,EAA0D,EAA1DA,YAAaF,EAA6C,EAA7CA,aAA6C,EAEvDS,IAAjCZ,EAFwF,EAExFA,cAAeF,EAFyE,EAEzEA,cAFyE,EAGhEe,IAAxBH,EAHwF,EAGxFA,WAAYC,EAH4E,EAG5EA,QAGduD,EAAerB,KAAKF,IAAIxC,EAAeQ,EAASN,EAAcK,GAShE,OAPIwD,EAAelE,IAAekE,EAAelE,GAC7CkE,EAAepE,IAAeoE,EAAepE,GAM1C,CACLmB,QAJU4B,KAAKF,IAAIE,KAAKH,IAAIG,KAAKE,MAAM1C,EAAc6D,GAAexD,GAAa,IAKjFM,KAJO6B,KAAKF,IAAIE,KAAKH,IAAIG,KAAKE,MAAM5C,EAAe+D,GAAevD,GAAU,KFpClDwD,CAAkBT,KAAKM,YAAzC/C,EAHH,EAGGA,QAASD,EAHZ,EAGYA,KAEjB0C,KAAKzC,QAAUA,EACfyC,KAAK1C,KAAOA,EAER0C,KAAKU,4BACPV,KAAKW,yBAxBX,oIAwCMC,EAASvD,EAAkB2C,KAAK1C,KAAM0C,KAAKzC,SAC5B,GACC,IAChBsD,EAAaD,EAAOE,KAClB,SAAAjD,GAAG,OAAIA,EAAIiD,KACT,gBAAGzC,EAAH,EAAGA,MAAOH,EAAV,EAAUA,OAAV,MAAwB,CACtB6C,GAAIC,IAAKC,KACTC,QAAS,CAAC,KAAMnC,KAChBS,MANU,IADD,GAO6BnB,EACtC8C,eAAe,EACfjD,gBAKR8B,KAAKoB,KAAOP,EAvDhB,mBAyDWrB,EAfW,IADD,GAgBYQ,KAAKqB,OAAwB,MAzD9D,OA4DMC,EAAUnC,KAAKoC,MAAMvB,KAAKzC,QAAU,GACpCiE,EAAUrC,KAAKoC,MAAMvB,KAAK1C,KAAO,GACjCuB,EAAOgC,EAAWC,KAAI,SAACjD,EAAKO,GAAN,OAAYP,EAAIiD,KACpC,SAACW,EAAStD,GAAV,sBACKsD,EADL,CAEEjC,MAAO,IAAgE,IAAzDL,KAAKH,IAAIG,KAAKuC,IAAIF,EAAUpD,GAAIe,KAAKuC,IAAIJ,EAAUnD,IACjED,OAAQiB,KAAKuC,IAAIF,EAAUpD,KAAOe,KAAKuC,IAAIJ,EAAUnD,GAAK,CACxDA,EAAGA,EAAImD,GAAW,EAAI,EACtBlD,EAAGA,EAAIoD,GAAW,EAAI,GACpBrD,EAAImD,EAAU,CAChBnD,GAAI,EACJC,EAAG,GACD,CACFD,EAAG,EACHC,EAAG,GAEL8C,QAAS,CAACO,EAAQP,QAAQ,GAAI,cAIpClB,KAAKoB,KAAOvC,EAhFhB,kGA6BI,OAAO,IA7BX,6BAkCI,OAAOmB,KAAKzC,QAAUyC,KAAK1C,SAlC/B,uCACGwC,KADH,wEAEuB,MAFvB,qCAIGA,KAJH,yEAKoB,KALpB,kCAOGA,KAPH,yEAQiB,KARjB,oHAUkCvD,OAVlC,kCAYGuD,KAZH,yEAaiB9D,EAAO2F,WAbxB,kCAgCGC,KAhCH,mHAqCGC,KArCH,oFAwGeC,EAJE,WACf,OAAO,IAAIjC,G,QMpHPkC,EAAcC,IAAMC,cAAkC,MAE/CC,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjCC,EAAQC,YAAcP,GAC5B,OAAO,kBAACC,EAAYO,SAAb,CAAsBjE,MAAO+D,GAAQD,I,wCCEzBI,E,YAGnB,WAAYC,GAAkB,IAAD,8BAC3B,4CAAMA,KAHRC,aAE6B,IAe7BC,KAAO,WACL,EAAKC,UAAS,SAAAC,GAAS,sBAClBA,EADkB,CAErBF,MAAOE,EAAUF,WAhBnB,EAAKG,MAAQ,CACXH,MAAM,GAGR,EAAKD,QAAU7C,YAAW,WACxB,EAAK8C,SACJF,EAAMhD,OARkB,E,oFAY3BsD,aAAa9C,KAAKyC,W,+BAkBhB,IAAEC,EAAS1C,KAAK6C,MAAdH,KAAF,EAC6B1C,KAAKwC,MAAhCtB,EADF,EACEA,QAASC,EADX,EACWA,cACX4B,EAAe7B,EAAQ,GACvB8B,EAAe9B,EAAQ,GAEzB,OAAOC,EACL,yBAAK8B,UAAWC,IAAWC,IAAO1B,QAAS0B,IAAOnD,KAAKoD,oBAAqBV,GAAQS,IAAOE,YACzF,yBAAKJ,UAAWE,IAAOG,WACrB,yBAAKL,UAAWE,IAAOI,aACpBR,GAGH,yBAAKE,UAAWE,IAAOI,aACpBP,KAKP,yBAAKC,UAAWC,IAAWC,IAAO1B,QAAS0B,IAAOK,mBAChD,yBAAKP,UAAWE,IAAOG,WACrB,yBAAKL,UAAWE,IAAOI,aACpBb,EAAOM,EAAeD,O,yCA7BP,IAChB7E,EAAW8B,KAAKwC,MAAhBtE,OAER,MAAM,gBAAN,OLkD+B,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,EAAGC,EAA2B,EAA3BA,EACvC,OAAU,IAAND,EACQ,IAANC,EACK,EACQ,IAANA,EACF,EAEA,EAEM,IAAND,EACC,IAANC,EACK,EACQ,IAANA,EACF,EAEA,EAGC,IAANA,EACK,EACQ,IAANA,EACF,EAEA,EKzEcqF,CAAoBvF,Q,GA5BV8D,IAAM0B,WCFrCC,EAAOC,aAAS,WAAO,IACnBxC,EFEa,WACrB,IAAMgB,EAAQJ,IAAM6B,WAAW9B,GAE/B,IAAKK,EAEH,MAAM,IAAI0B,MAAM,+CAGlB,OAAO1B,EEVU2B,GAAT3C,KAER,OACE,yBAAK6B,UAAWE,IAAO/B,MACrB,yBAAK6B,UAAWE,IAAOa,QAEnB5C,EAAKN,KAAI,SAAAjD,GAAG,OACV,kBAAC,GAAD,CAAKoG,IAAKjD,IAAKC,MAEXpD,EAAIiD,KAAI,SAACW,GAAD,OACN,kBAAC,GAAD,CAAKwC,IAAKxC,EAAQV,IAChB,kBAAC,EAAYU,gBAa3ByC,GAAgB,SAAC,GAAD,IAAG/B,EAAH,EAAGA,SAAH,OAAkB,yBAAKc,UAAWE,IAAOtF,KAAMsE,IAI/DgC,GAAgB,SAAC,GAAkB,IAAhBhC,EAAe,EAAfA,SACvB,OACE,yBACEc,UACEC,IAAWC,IAAOvF,MAGpB,yBAAKqF,UAAWE,IAAOiB,OACpBjC,KAMMwB,K,SC/CTU,GCEkB,SAAmBX,GAUzC,OAR0C,SAAC,GAAkB,IAAblB,EAAY,mBACxD,OACE,kBAAC,EAAD,KACE,kBAACkB,EAAclB,KDPD8B,CAAgBX,IAQzBY,GANO,WACpB,OACE,kBAACF,GAAD,OEIgBG,QACW,cAA7BhI,OAAOiI,SAASC,UAEe,UAA7BlI,OAAOiI,SAASC,UAEhBlI,OAAOiI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAQC,SAASC,eAAe,SDqI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.def67d12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flipper\":\"Flipper_flipper__14-7N\",\"isIcon\":\"Flipper_isIcon__3scFd\",\"isImage\":\"Flipper_isImage__1dr-L\",\"withoutAnimation\":\"Flipper_withoutAnimation__26oWC\",\"flipperSide\":\"Flipper_flipperSide__3bjKX\",\"flipperIn\":\"Flipper_flipperIn__ydsnX\",\"isFlipped\":\"Flipper_isFlipped__2fwGj\",\"flipDirection1\":\"Flipper_flipDirection1__2CX0R\",\"flipDirection5\":\"Flipper_flipDirection5__3erTy\",\"flipDirection2\":\"Flipper_flipDirection2__23wn4\",\"flipDirection6\":\"Flipper_flipDirection6__36758\",\"flipDirection3\":\"Flipper_flipDirection3__QaEeh\",\"flipDirection7\":\"Flipper_flipDirection7__2SYue\",\"flipDirection4\":\"Flipper_flipDirection4__14e5g\",\"flipDirection8\":\"Flipper_flipDirection8__8I0LX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"maxCellSize\":\"100px\",\"grid\":\"Grid_grid__24j1p\",\"gridIn\":\"Grid_gridIn__2Raaz\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\",\"isFloating1\":\"Grid_isFloating1__20oI4\",\"floating-1\":\"Grid_floating-1__1dRll\",\"isFloating2\":\"Grid_isFloating2__1eMuV\",\"floating-2\":\"Grid_floating-2__25ATD\",\"isFloating3\":\"Grid_isFloating3__1prHf\",\"floating-3\":\"Grid_floating-3__1cUcQ\",\"isFloating4\":\"Grid_isFloating4__Ck5IM\",\"floating-4\":\"Grid_floating-4__1OzQw\",\"isFloating5\":\"Grid_isFloating5__3C1TG\",\"floating-5\":\"Grid_floating-5__3QYP9\",\"isFloating6\":\"Grid_isFloating6__JcZcL\",\"floating-6\":\"Grid_floating-6__2keIC\",\"isFloating7\":\"Grid_isFloating7__1EbOc\",\"floating-7\":\"Grid_floating-7__1hJ9u\",\"isFloating8\":\"Grid_isFloating8__3ccTU\",\"floating-8\":\"Grid_floating-8__2tMjq\",\"isFloating9\":\"Grid_isFloating9__3JlyO\",\"floating-9\":\"Grid_floating-9__1-RLT\",\"isFloating10\":\"Grid_isFloating10__32WJ3\",\"floating-10\":\"Grid_floating-10__5rQpD\",\"colIn\":\"Grid_colIn__1AHxM\"};","import { action, computed, observable, reaction } from 'mobx'\nimport { calculateGridSize, getWindowSize, I2DVector, makeOrderedSpiral } from '../helpers/grid'\nimport { getRandomEmoji } from '../helpers/emoji'\nimport uuid from 'uuid'\nimport { debounce } from 'lodash'\nimport { delay } from '../helpers/scenario'\n\nexport enum EViews { initial, application, snake }\n\nexport type TFlipperContent = string | null\n\nexport interface IFlipper {\n  content: TFlipperContent[]\n  delay: number\n  vector: I2DVector\n  id: string\n  withAnimation: boolean\n}\n\nexport class GridService {\n  @observable\n  grid: IFlipper[][] = []\n\n  @observable\n  columns: number = 0\n\n  @observable\n  rows: number = 0\n\n  @observable.struct windowSize = getWindowSize()\n\n  @observable\n  view: EViews = EViews.initial\n\n  init() {\n    console.log('init')\n\n    const { columns, rows } = calculateGridSize(this.windowSize)\n\n    this.columns = columns\n    this.rows = rows\n\n    if (this.needToShowInitialAnimation) {\n      this.showInitialAnimation()\n    }\n  }\n\n  get needToShowInitialAnimation() {\n    return true\n  }\n\n  @computed\n  get square() {\n    return this.columns * this.rows\n  }\n\n  @action\n  async showInitialAnimation() {\n    const\n      spiral = makeOrderedSpiral(this.rows, this.columns),\n      LINEAR_DELAY = 20,\n      INITIAL_DELAY = 200,\n      spiralGrid = spiral.map(\n        row => row.map(\n          ({ value, vector }) => ({\n            id: uuid.v4(),\n            content: [null, getRandomEmoji()],\n            delay: INITIAL_DELAY + LINEAR_DELAY * value,\n            withAnimation: false,\n            vector,\n          })\n        )\n      )\n\n    this.grid = spiralGrid\n\n    await (delay(INITIAL_DELAY + this.square * LINEAR_DELAY + 400))\n\n    const\n      middleX = Math.floor(this.columns / 2),\n      middleY = Math.floor(this.rows / 2),\n      next = spiralGrid.map((row, y) => row.map(\n        (flipper, x) => ({\n          ...flipper,\n          delay: 1000 + Math.max(Math.abs(middleY - y), Math.abs(middleX - x)) * 130,\n          vector: Math.abs(middleY - y) === Math.abs(middleX - x) ? {\n            x: x < middleX ? -1 : 1,\n            y: y < middleY ? -1 : 1\n          } : x < middleX ? {\n            x: -1,\n            y: 0\n          } : {\n            x: 1,\n            y: 0\n          },\n          content: [flipper.content[1], null]\n        })\n      ))\n\n    this.grid = next\n  }\n\n  constructor() {\n    this.init()\n\n    window.addEventListener('resize', debounce(() => {\n      console.log('resize')\n      this.windowSize = getWindowSize()\n    }, 500))\n\n    reaction(() => {\n      return this.windowSize\n    }, () => {\n      this.init()\n    })\n  }\n}\n\n\nconst makeGrid = () => {\n  return new GridService()\n}\n\nexport default makeGrid\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { maxCellSize, minCellSize } = gridStyle\n\nexport const\n  MAX_CELL_SIZE = parseInt(maxCellSize),\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","import { MAX_CELL_SIZE, MIN_CELL_SIZE } from '../constants'\n\nexport interface IGridParams {\n  columns: number\n  rows: number\n}\n\nexport interface IWindowSize {\n  windowWidth: number\n  windowHeight: number\n}\n\nexport const getWindowSize = (): IWindowSize => {\n  const { innerHeight: windowHeight, innerWidth: windowWidth } = window\n\n  return {\n    windowWidth,\n    windowHeight,\n  }\n}\n\nconst isPortraitMode = (): boolean => {\n  const { windowWidth, windowHeight } = getWindowSize()\n\n  return windowWidth > windowHeight\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 12,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => {\n  const isPortrait = isPortraitMode()\n\n\n  return {\n    minColumns: isPortrait ? 8 : 7,\n    minRows: isPortrait ? 7 : 8,\n  }\n}\n\nconst getMinAndMaxCellSize = () => ({\n  MIN_CELL_SIZE,\n  MAX_CELL_SIZE\n})\n\nexport const isMobile = () => {\n  const\n    { MIN_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getDesktopMinColumnsAndRows(),\n    { windowHeight, windowWidth } = getWindowSize()\n\n  return windowWidth <= MIN_CELL_SIZE * minColumns || windowHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getMinGridSize = () => (\n  isMobile() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nexport const calculateGridSize = ({ windowWidth, windowHeight }: IWindowSize): IGridParams => {\n  const\n    { MIN_CELL_SIZE, MAX_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(windowHeight / minRows, windowWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n  if (gridItemSize > MAX_CELL_SIZE) gridItemSize = MAX_CELL_SIZE\n\n  const\n    columns = Math.min(Math.max(Math.round(windowWidth / gridItemSize), minColumns), 45),\n    rows = Math.min(Math.max(Math.round(windowHeight / gridItemSize), minRows), 30)\n\n  return {\n    columns,\n    rows,\n  }\n}\n\n\n/**\n 1 2 3\n 8 x 4\n 7 6 5\n */\n\nexport const getFlipDirectionKey = ({ x, y }: I2DVector): number => {\n  if (x === 1) {\n    if (y === 0) {\n      return 4\n    } else if (y === 1) {\n      return 5\n    } else {\n      return 3\n    }\n  } else if (x === 0) {\n    if (y === 1) {\n      return 6\n    } else if (y === 0) {\n      return 4\n    } else {\n      return 2\n    }\n  } else {\n    if (y === 0) {\n      return 8\n    } else if (y === 1) {\n      return 7\n    } else {\n      return 1\n    }\n  }\n}\n\nexport interface I2DVector {\n  x: number\n  y: number\n}\n\nexport interface IOrderedSpiral {\n  value: number\n  vector: I2DVector\n}\n\nexport const makeOrderedSpiral = (rows: number, columns: number): IOrderedSpiral[][] => {\n  let result: IOrderedSpiral[][] = []\n\n  for (let j = 0; j < rows; j++) {\n    result.push(Array(columns))\n  }\n\n  let\n    col = -1,\n    row = 0,\n    minCol = 0,\n    minRow = 0,\n    maxCol = columns,\n    maxRow = rows,\n    vector: I2DVector = {\n      x: 1,\n      y: 0\n    },\n    value = 0\n\n  const\n    getVectorX = () => vector.x,\n    getVectorY = () => vector.y,\n    getNext = (): { nextX: number, nextY: number } | null => {\n\n      const\n        nextX = col + getVectorX(),\n        nextY = row + getVectorY()\n\n      if (getVectorY() === 0) {\n        if (minCol === maxCol) return null\n\n        if (nextX >= maxCol) {\n          vector = {\n            x: 0,\n            y: 1,\n          }\n          minRow++\n          return getNext()\n        }\n\n        if (nextX < minCol) {\n          vector = {\n            x: 0,\n            y: -1,\n          }\n          maxRow--\n          return getNext()\n        }\n      }\n\n      if (getVectorX() === 0) {\n        if (minRow === maxRow) return null\n\n        if (nextY >= maxRow) {\n          vector = {\n            x: -1,\n            y: 0,\n          }\n          maxCol--\n          return getNext()\n        }\n\n        if (nextY < minRow) {\n          vector = {\n            x: 1,\n            y: 0,\n          }\n          minCol++\n          return getNext()\n        }\n      }\n\n      return { nextX, nextY }\n    },\n\n    fill = () => {\n      const\n        { x, y } = vector,\n        resultVector = { x, y }\n\n      if (col || row) {\n        if (x === 1 && y === 0 && col === maxCol - 1) {\n          resultVector.y = 1\n        }\n\n        if (x === 0 && y === 1 && row === maxRow - 1) {\n          resultVector.x = -1\n        }\n\n        if (x === -1 && y === 0 && col === minCol) {\n          resultVector.y = -1\n        }\n\n        if (x === 0 && y === -1 && row === minRow) {\n          resultVector.x = 1\n        }\n      }\n\n      result[row][col] = {\n        value: value++,\n        vector: { ...resultVector }\n      }\n    }\n\n  while (true) {\n    const next = getNext()\n\n    if (!next) break\n\n    const { nextX, nextY } = next\n\n    col = nextX\n    row = nextY\n\n    fill()\n  }\n\n  return result\n}\n\n","import { randomInteger } from './misc'\n\nconst emojiList: string[] = ['✈️', '🙂', '😂', '️🤦', '️🤘', '🤔', '😕', '💩', '💡', '👋', '😛', '😭', '🥶', '😱', '😡', '😥', '😬', '💩', '👻', '👾', '😺', '👊', '🖖', '💪', '👀', '🙋', '️🐶', '🐱', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯', '🦁', '🐮', '🐷', '🐸', '🐵', '🙈', '🙉', '🙊', '🐒', '🐔', '🐧', '🐦', '🐤', '🦄', '🦉', '🐍', '🐊', '🐋', '🦖', '🌞', '🌚', '🔥', '🌈', '🌤', '🍿', '🍔', '🍕', '🍟', '🍺', '🎸', '🚴', '‍️❤️'\n]\n\nexport const getRandomEmoji = () => {\n  return emojiList[randomInteger(emojiList.length - 1)]\n}\n","export const orderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const randomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n","export type TScenarioValue = any | Function\nexport type TScenario = { delay?: number, value: TScenarioValue }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield typeof value === 'function' ? value() : value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => boolean) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    const breakScenario = process(item)\n    if (breakScenario) break\n  }\n}\n","import React from 'react'\nimport makeGrid, { GridService } from '../services/GridService' // 6.x or mobx-react-lite@1.4.0\nimport { useLocalStore } from 'mobx-react'\n\nconst gridContext = React.createContext<GridService | null>(null)\n\nexport const GridProvider: React.FC = ({ children }) => {\n  const store = useLocalStore(makeGrid)\n  return <gridContext.Provider value={store}>{children}</gridContext.Provider>\n}\n\nexport const useGrid = () => {\n  const store = React.useContext(gridContext)\n\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useGrid must be used within a GridProvider.')\n  }\n\n  return store\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './Flipper.module.scss'\nimport { getFlipDirectionKey } from '../../helpers/grid'\nimport { IFlipper } from '../../services/GridService'\n\ninterface IState {\n  flip: boolean\n}\n\nexport default class Flipper extends React.Component<IFlipper, IState> {\n  timeout: any\n\n  constructor(props: IFlipper) {\n    super(props)\n    this.state = {\n      flip: false,\n    }\n\n    this.timeout = setTimeout(() => {\n      this.flip()\n    }, props.delay)\n  }\n\n  componentWillUnmount(): void {\n    clearTimeout(this.timeout)\n  }\n\n  flip = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      flip: !prevState.flip\n    }))\n  }\n\n  get flipDirectionClass() {\n    const { vector } = this.props\n\n    return `flipDirection${getFlipDirectionKey(vector)}`\n  }\n\n  render() {\n    const\n      { flip } = this.state,\n      { content, withAnimation } = this.props,\n      side1Content = content[0],\n      side2Content = content[1]\n\n    return withAnimation ? (\n      <div className={classNames(styles.flipper, styles[this.flipDirectionClass], flip && styles.isFlipped)}>\n        <div className={styles.flipperIn}>\n          <div className={styles.flipperSide}>\n            {side1Content}\n          </div>\n\n          <div className={styles.flipperSide}>\n            {side2Content}\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div className={classNames(styles.flipper, styles.withoutAnimation)}>\n        <div className={styles.flipperIn}>\n          <div className={styles.flipperSide}>\n            {flip ? side2Content : side1Content}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport Flipper from '../Flipper'\nimport uuid from 'uuid'\nimport { observer } from 'mobx-react'\n\nconst Grid = observer(() => {\n  const { grid } = useGrid()\n\n  return (\n    <div className={styles.grid}>\n      <div className={styles.gridIn}>\n        {\n          grid.map(row => (\n            <Row key={uuid.v4()}>\n              {\n                row.map((flipper) => (\n                  <Col key={flipper.id}>\n                    <Flipper {...flipper}/>\n                  </Col>\n                ))\n              }\n            </Row>\n          ))\n        }\n      </div>\n    </div>\n  )\n})\n\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst getRandomFloatingClass = () => styles[`isFloating${Math.round(10 * Math.random())}`]\n\nconst Col: React.FC = ({ children }) => {\n  return (\n    <div\n      className={\n        classNames(styles.col)\n      }\n    >\n      <div className={styles.colIn}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Grid\n","import React from 'react'\nimport Grid from './components/Grid'\nimport withGridContext from './hoc/withGridContext'\n\nconst GridWithContext = withGridContext(Grid)\n\nconst App: React.FC = () => {\n  return (\n    <GridWithContext/>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { GridProvider } from '../contextProviders/GridProvider'\n\ninterface IHocProps {\n}\n\nconst withGridContext = <P extends object>(Component: React.ComponentType<P>) => {\n  const\n    HocComponent: React.FC<P & IHocProps> = ({ ...props }) => {\n      return (\n        <GridProvider>\n          <Component {...props as P} />\n        </GridProvider>\n      )\n    }\n\n  return HocComponent\n}\n\nexport default withGridContext\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}