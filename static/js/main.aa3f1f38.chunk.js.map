{"version":3,"sources":["components/Flipper/Cell.module.scss","services/GridService.ts","constants.ts","helpers/scenario.ts","helpers/grid.ts","helpers/misc.ts","helpers/emoji.ts","contextProviders/GridProvider.tsx","components/Flipper/Cell.tsx","components/Grid/Grid.tsx","App.tsx","hoc/withGridContext.tsx","serviceWorker.ts","index.tsx","components/Grid/Grid.module.scss"],"names":["module","exports","EViews","maxCellSize","gridStyle","minCellSize","MAX_CELL_SIZE","parseInt","MIN_CELL_SIZE","delay","ms","Promise","resolve","setTimeout","getViewportSize","window","viewportHeight","innerHeight","viewportWidth","innerWidth","getMobileMinColumnsAndRows","isPortrait","isPortraitMode","minColumns","minRows","getMinAndMaxCellSize","getMinGridSize","isMobile","makeSpiralScenario","columns","rows","Symbol","asyncIterator","a","result","j","push","Array","column","row","minCol","minRow","maxCol","maxRow","vector","x","y","getVectorX","getVectorY","getNext","nextX","nextY","next","runGridScenario","scenario","stepDelay","process","async","getRandomArrayItem","array","max","min","rand","Math","random","round","getRandomInteger","length","emojiList","GridService","observable","struct","this","init","addEventListener","debounce","viewportSize","reaction","id","cells","uuid","v4","cellId","content","console","log","grid","gridItemSize","calculateGridSize","initGrid","needToShowInitialAnimation","showInitialAnimation","DELAY","square","data","forEach","getCell","initial","action","computed","makeGrid","gridContext","React","createContext","GridProvider","children","store","useLocalStore","Provider","value","useGrid","useContext","Error","Cell","observer","className","classNames","styles","cell","isText","Grid","map","key","Row","Col","col","GridWithContext","Component","props","withGridContext","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa3f1f38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2Y_Ns\",\"withoutAnimation\":\"Cell_withoutAnimation__3ExHM\",\"cellSide\":\"Cell_cellSide__3ke7A\"};","import { action, computed, observable, reaction } from 'mobx'\nimport { calculateGridSize, getViewportSize, makeSpiralScenario, runGridScenario } from '../helpers/grid'\nimport { debounce } from 'lodash'\nimport uuid from 'uuid'\nimport { getRandomEmoji } from '../helpers/emoji'\n\nexport enum EViews { initial, application, snake }\n\nexport type TFlipperContent = string | null\n\nexport interface ICell {\n  content?: TFlipperContent\n}\n\nexport interface IRow {\n  columns: string[]\n  id: string\n}\n\nexport interface ICells {\n  [key: string]: ICell\n}\n\nexport class GridService {\n  @observable\n  columns: number = 0\n\n  @observable\n  rows: number = 0\n\n  @observable.struct viewportSize = getViewportSize()\n\n  @observable\n  view: EViews = EViews.initial\n\n  @observable\n  grid: Array<IRow> = []\n\n  @observable\n  private cells: ICells = {}\n\n  getCell(id: string) {\n    return this.cells[id]\n  }\n\n  @action initGrid() {\n    let result: Array<IRow> = []\n\n    for (let row = 0; row < this.rows; row++) {\n      result.push({\n        id: uuid.v4(),\n        columns: []\n      })\n\n      for (let column = 0; column < this.columns; column++) {\n        const cellId = uuid.v4()\n\n        result[row].columns.push(cellId)\n\n        this.cells[cellId] = {\n          content: null\n        }\n      }\n    }\n\n    console.log(this.cells)\n\n    this.grid = result\n  }\n\n  @action\n  private init() {\n    const { columns, rows } = calculateGridSize(this.viewportSize)\n\n    this.columns = columns\n    this.rows = rows\n\n    this.initGrid()\n\n    if (this.needToShowInitialAnimation) {\n      this.showInitialAnimation()\n    }\n  }\n\n  private get needToShowInitialAnimation() {\n    return true\n  }\n\n  @computed\n  get square() {\n    return this.columns * this.rows\n  }\n\n  @action\n  async showInitialAnimation() {\n    const DELAY = 2000 / this.square\n\n    {\n      const\n        { columns, rows, grid } = this,\n        scenarioConfig = { columns, rows },\n        scenario = makeSpiralScenario(scenarioConfig)\n\n      await runGridScenario(scenario, DELAY, (data) => {\n        data.forEach(({ column, row }) => {\n          const\n            cellId = grid[row].columns[column],\n            cell = this.getCell(cellId)\n\n          cell.content = getRandomEmoji()\n        })\n\n        return false\n      })\n    }\n\n    const\n      { columns, rows, grid } = this,\n      scenarioConfig = { columns, rows },\n      scenario = makeSpiralScenario(scenarioConfig)\n\n    await runGridScenario(scenario, DELAY, (data) => {\n      data.forEach(({ column, row }) => {\n        const\n          cellId = grid[row].columns[column],\n          cell = this.getCell(cellId)\n\n        cell.content = null\n      })\n\n      return false\n    })\n\n    this.showInitialAnimation()\n\n    // const spiral = makeSpiral(this.rows, this.columns)\n    //\n    // console.log(spiral)\n    // this.grid = spiral.map(\n    //   row => ({\n    //     id: uuid.v4(),\n    //     columns: row.map(\n    //       value => ({\n    //         id: uuid.v4(),\n    //         content: getRandomEmoji(),\n    //         type: ECellType.text,\n    //         delay: LINEAR_DELAY * value + INITIAL_DELAY,\n    //       })\n    //     )\n    //   })\n    // )\n\n    // await (delay(INITIAL_DELAY + this.square * LINEAR_DELAY + 1900))\n    //\n    // const\n    //   middleX = Math.floor(this.columns / 2),\n    //   middleY = Math.floor(this.rows / 2),\n    //   next: IRow[] = this.grid.map(({ id, columns }, y) => ({\n    //     id,\n    //     columns: columns.map(\n    //       ((cell, x) => {\n    //           return {\n    //             ...cell,\n    //             id: uuid.v4(),\n    //             delay: Math.max(Math.abs(middleY - y), Math.abs(middleX - x)) * 100,\n    //             vector: Math.abs(middleY - y) === Math.abs(middleX - x) ? {\n    //               x: x < middleX ? -1 : 1,\n    //               y: y < middleY ? -1 : 1\n    //             } : x < middleX ? {\n    //               x: -1,\n    //               y: 0\n    //             } : {\n    //               x: 1,\n    //               y: 0\n    //             },\n    //             content: null\n    //           }\n    //         }\n    //       ))\n    //   }))\n\n    // this.grid = next\n  }\n\n  constructor() {\n    this.init()\n\n    window.addEventListener('resize', debounce(() => {\n      this.viewportSize = getViewportSize()\n    }, 500))\n\n    reaction(() => {\n      return this.viewportSize\n    }, () => {\n      this.init()\n    })\n  }\n}\n\nconst makeGrid = () => {\n  return new GridService()\n}\n\nexport default makeGrid\n","import gridStyle from './components/Grid/Grid.module.scss'\n\nconst { maxCellSize, minCellSize } = gridStyle\n\nexport const\n  MAX_CELL_SIZE = parseInt(maxCellSize),\n  MIN_CELL_SIZE = parseInt(minCellSize)\n","export type TScenarioValue = any | Function\nexport type TScenario = { delay?: number, value: TScenarioValue }\n\nexport const delay = (ms: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const makeScenario = (scenarios: TScenario[]) => ({\n  [Symbol.asyncIterator]: async function* () {\n    for (let i = 0; i < scenarios.length; i++) {\n      const { delay: sceneDelay, value } = scenarios[i]\n\n      if (sceneDelay) {\n        await delay(sceneDelay)\n      }\n\n      yield typeof value === 'function' ? value() : value\n    }\n  }\n})\n\nexport const runScenario = async <T>(scenes: TScenario[], process: (item: T) => boolean) => {\n  const scenario = makeScenario(scenes)\n\n  for await (const item of scenario) {\n    const breakScenario = process(item)\n    if (breakScenario) break\n  }\n}\n","import { MAX_CELL_SIZE, MIN_CELL_SIZE } from '../constants'\nimport { delay } from './scenario'\n\nexport interface IGridParams {\n  columns: number\n  rows: number\n}\n\nexport interface IViewportSize {\n  viewportWidth: number\n  viewportHeight: number\n}\n\nexport const getViewportSize = (): IViewportSize => {\n  const { innerHeight: viewportHeight, innerWidth: viewportWidth } = window\n\n  return {\n    viewportWidth,\n    viewportHeight,\n  }\n}\n\nconst isPortraitMode = (): boolean => {\n  const { viewportWidth, viewportHeight } = getViewportSize()\n\n  return viewportWidth > viewportHeight\n}\n\nexport const getDesktopMinColumnsAndRows = () => ({\n  minColumns: 12,\n  minRows: 11,\n})\n\nexport const getMobileMinColumnsAndRows = () => {\n  const isPortrait = isPortraitMode()\n\n\n  return {\n    minColumns: isPortrait ? 8 : 7,\n    minRows: isPortrait ? 7 : 8,\n  }\n}\n\nconst getMinAndMaxCellSize = () => ({\n  MIN_CELL_SIZE,\n  MAX_CELL_SIZE\n})\n\nexport const isMobile = () => {\n  const\n    { MIN_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getDesktopMinColumnsAndRows(),\n    { viewportHeight, viewportWidth } = getViewportSize()\n\n  return viewportWidth <= MIN_CELL_SIZE * minColumns || viewportHeight <= MIN_CELL_SIZE * minRows\n}\n\nexport const getMinGridSize = () => (\n  isMobile() ? getMobileMinColumnsAndRows() : getDesktopMinColumnsAndRows()\n)\n\nexport const calculateGridSize = ({ viewportWidth, viewportHeight }: IViewportSize): IGridParams => {\n  const\n    { MIN_CELL_SIZE, MAX_CELL_SIZE } = getMinAndMaxCellSize(),\n    { minColumns, minRows } = getMinGridSize()\n\n  let\n    gridItemSize = Math.min(viewportHeight / minRows, viewportWidth / minColumns)\n\n  if (gridItemSize < MIN_CELL_SIZE) gridItemSize = MIN_CELL_SIZE\n  if (gridItemSize > MAX_CELL_SIZE) gridItemSize = MAX_CELL_SIZE\n\n  const\n    columns = Math.min(Math.max(Math.round(viewportWidth / gridItemSize), minColumns), 45),\n    rows = Math.min(Math.max(Math.round(viewportHeight / gridItemSize), minRows), 30)\n\n  return {\n    columns,\n    rows,\n  }\n}\n\n\n/**\n 1 2 3\n 8 x 4\n 7 6 5\n */\n\nexport const getFlipDirectionKey = ({ x, y }: I2DVector): number => {\n  if (x === 1) {\n    if (y === 0) {\n      return 4\n    } else if (y === 1) {\n      return 5\n    } else {\n      return 3\n    }\n  } else if (x === 0) {\n    if (y === 1) {\n      return 6\n    } else if (y === 0) {\n      return 4\n    } else {\n      return 2\n    }\n  } else {\n    if (y === 0) {\n      return 8\n    } else if (y === 1) {\n      return 7\n    } else {\n      return 1\n    }\n  }\n}\n\nexport interface I2DVector {\n  x: number\n  y: number\n}\n\ninterface IGridGeneratorStep {\n  column: number\n  row: number\n}\n\nexport const makeSpiralScenario = ({ columns, rows }: IGridParams) => ({\n  [Symbol.asyncIterator]: async function* () {\n    let result: number[][] = []\n\n    for (let j = 0; j < rows; j++) {\n      result.push(Array(columns))\n    }\n\n    let\n      column = -1,\n      row = 0,\n      minCol = 0,\n      minRow = 0,\n      maxCol = columns,\n      maxRow = rows,\n      vector: I2DVector = {\n        x: 1,\n        y: 0\n      }\n\n    const\n      getVectorX = () => vector.x,\n      getVectorY = () => vector.y,\n      getNext = (): { nextX: number, nextY: number } | null => {\n        const\n          nextX = column + getVectorX(),\n          nextY = row + getVectorY()\n\n        if (getVectorY() === 0) {\n          if (minCol === maxCol) return null\n\n          if (nextX >= maxCol) {\n            vector = {\n              x: 0,\n              y: 1,\n            }\n            minRow++\n            return getNext()\n          }\n\n          if (nextX < minCol) {\n            vector = {\n              x: 0,\n              y: -1,\n            }\n            maxRow--\n            return getNext()\n          }\n        }\n\n        if (getVectorX() === 0) {\n          if (minRow === maxRow) return null\n\n          if (nextY >= maxRow) {\n            vector = {\n              x: -1,\n              y: 0,\n            }\n            maxCol--\n            return getNext()\n          }\n\n          if (nextY < minRow) {\n            vector = {\n              x: 1,\n              y: 0,\n            }\n            minCol++\n            return getNext()\n          }\n        }\n\n        return { nextX, nextY }\n      }\n\n    while (true) {\n      const next = getNext()\n\n      if (!next) break\n\n      const { nextX, nextY } = next\n\n      column = nextX\n      row = nextY\n\n      yield { column, row }\n    }\n  }\n})\n\nexport const runGridScenario = async (\n  scenario: AsyncIterable<IGridGeneratorStep>,\n  stepDelay: number,\n  process: (data: IGridGeneratorStep[]) => boolean\n) => {\n  for await (const data of scenario) {\n    const breakScenario = process([data])\n    if (breakScenario) break\n\n    if (stepDelay > 0) {\n      await delay(stepDelay)\n    }\n  }\n}\n\nexport const getFilledMatrix = <T>({ columns, rows, value }: IGridParams & { value: T }): T[][] => {\n  const result: T[][] = []\n\n  for (let row = 0; row < rows; row++) {\n    result.push([])\n    for (let column = 0; column < columns; column++) {\n      result[row].push(value)\n    }\n  }\n\n  return result\n}\n","export const getOrderedArray = (count: number): number[] => Array.from(Array(count < 0 ? 0 : count).keys())\n\nexport const getRandomInteger = (max: number, min: number = 0) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1)\n  return Math.round(rand)\n}\n\nexport const getRandomArrayItem = <T>(array: T[]): T => array[getRandomInteger(array.length - 1)]\n","import { getRandomArrayItem } from './misc'\n\nconst emojiList: string[] = ['✈️', '🙂', '😂', '️🤦', '️🤘', '🤔', '😕', '💩', '💡', '👋', '😛', '😭', '🥶', '😱', '😡', '😥', '😬', '💩', '👻', '👾', '😺', '👊', '🖖', '💪', '👀', '🙋', '️🐶', '🐱', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯', '🦁', '🐮', '🐷', '🐸', '🐵', '🙈', '🙉', '🙊', '🐒', '🐔', '🐧', '🐦', '🐤', '🦄', '🦉', '🐍', '🐊', '🐋', '🦖', '🌞', '🌚', '🔥', '🌈', '🌤', '🍿', '🍔', '🍕', '🍟', '🍺', '🎸', '🚴', '‍️❤️'\n]\n\nexport const getRandomEmoji = () => {\n  return getRandomArrayItem(emojiList)\n}\n","import React from 'react'\nimport makeGrid, { GridService } from '../services/GridService' // 6.x or mobx-react-lite@1.4.0\nimport { useLocalStore } from 'mobx-react'\n\nconst gridContext = React.createContext<GridService | null>(null)\n\nexport const GridProvider: React.FC = ({ children }) => {\n  const store = useLocalStore(makeGrid)\n  return <gridContext.Provider value={store}>{children}</gridContext.Provider>\n}\n\nexport const useGrid = () => {\n  const store = React.useContext(gridContext)\n\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useGrid must be used within a GridProvider.')\n  }\n\n  return store\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport styles from './Cell.module.scss'\nimport { observer } from 'mobx-react'\nimport { useGrid } from '../../contextProviders/GridProvider'\n\n\nconst Cell = observer(({ id }: { id: string }) => {\n  const\n    gridService = useGrid(),\n    { content } = gridService.getCell(id)\n\n  return (\n    <div className={classNames(styles.cell, styles.isText)}>\n      {content}\n    </div>\n  )\n})\n\nexport default Cell\n","import React from 'react'\nimport styles from './Grid.module.scss'\nimport classNames from 'classnames'\nimport Cell from '../Flipper'\nimport { useGrid } from '../../contextProviders/GridProvider'\nimport { observer } from 'mobx-react'\n\nconst Grid = observer(() => {\n  const { grid } = useGrid()\n\n  return (\n    <div className={styles.grid}>\n      {\n        grid.map(({ id, columns }) => (\n          <Row key={id}>\n            {\n              columns.map(id => (\n                <Col key={id}>\n                  <Cell id={id}/>\n                </Col>\n              ))\n            }\n          </Row>\n        ))\n      }\n    </div>\n  )\n})\n\nconst Row: React.FC = ({ children }) => <div className={styles.row}>{children}</div>\n\nconst Col: React.FC = ({ children }) => {\n  return (\n    <div\n      className={\n        classNames(styles.col)\n      }\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Grid\n","import React from 'react'\nimport Grid from './components/Grid'\nimport withGridContext from './hoc/withGridContext'\n\nconst GridWithContext = withGridContext(Grid)\n\nconst App: React.FC = () => {\n  return (\n    <GridWithContext/>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { GridProvider } from '../contextProviders/GridProvider'\n\ninterface IHocProps {\n}\n\nconst withGridContext = <P extends object>(Component: React.ComponentType<P>) => {\n  const\n    HocComponent: React.FC<P & IHocProps> = ({ ...props }) => {\n      return (\n        <GridProvider>\n          <Component {...props as P} />\n        </GridProvider>\n      )\n    }\n\n  return HocComponent\n}\n\nexport default withGridContext\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minCellSize\":\"40px\",\"maxCellSize\":\"100px\",\"grid\":\"Grid_grid__24j1p\",\"row\":\"Grid_row__2rajf\",\"col\":\"Grid_col__1SX7O\"};"],"sourceRoot":""}